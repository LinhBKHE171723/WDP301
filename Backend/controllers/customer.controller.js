const Menu = require("../models/Menu");
const Item = require("../models/Item");
const Table = require("../models/Table");
const Order = require("../models/Order");
const OrderItem = require("../models/OrderItem");
const Payment = require("../models/Payment");
const Feedback = require("../models/Feedback");

// L·∫•y th√¥ng tin b√†n theo s·ªë b√†n
exports.getTableByNumber = async (req, res) => {
  try {
    const { tableNumber } = req.params;
    const table = await Table.findOne({ tableNumber: parseInt(tableNumber) });
    
    if (!table) {
      return res.status(404).json({ 
        success: false, 
        message: "Kh√¥ng t√¨m th·∫•y b√†n" 
      });
    }

    // Ki·ªÉm tra status c·ªßa b√†n
    if (table.status === 'occupied') {
      return res.status(400).json({
        success: false,
        message: "B√†n n√†y ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn b√†n kh√°c."
      });
    }

    if (table.status === 'reserved') {
      return res.status(400).json({
        success: false,
        message: "B√†n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc. Vui l√≤ng ch·ªçn b√†n kh√°c."
      });
    }

    // Ch·ªâ cho ph√©p v√†o menu khi b√†n c√≥ status 'available'
    if (table.status !== 'available') {
      return res.status(400).json({
        success: false,
        message: "B√†n n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ch·ªçn b√†n kh√°c."
      });
    }

    res.status(200).json({
      success: true,
      data: table
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// L·∫•y danh s√°ch menu c√≥ s·∫µn
exports.getAvailableMenus = async (req, res) => {
  try {
    const menus = await Menu.find({ isAvailable: true })
      .populate("items")
      .sort({ createdAt: -1 });
    
    res.status(200).json({
      success: true,
      data: menus
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// L·∫•y chi ti·∫øt menu
exports.getMenuById = async (req, res) => {
  try {
    const menu = await Menu.findById(req.params.menuId)
      .populate("items");
    
    if (!menu) {
      return res.status(404).json({ 
        success: false, 
        message: "Kh√¥ng t√¨m th·∫•y menu" 
      });
    }

    res.status(200).json({
      success: true,
      data: menu
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// L·∫•y danh s√°ch m√≥n ƒÉn c√≥ s·∫µn
exports.getAvailableItems = async (req, res) => {
  try {
    const items = await Item.find({ isAvailable: true })
      .populate("ingredients")
      .sort({ createdAt: -1 });
    
    res.status(200).json({
      success: true,
      data: items
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// L·∫•y chi ti·∫øt m√≥n ƒÉn
exports.getItemById = async (req, res) => {
  try {
    const item = await Item.findById(req.params.itemId)
      .populate("ingredients");
    
    if (!item) {
      return res.status(404).json({ 
        success: false, 
        message: "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn" 
      });
    }

    res.status(200).json({
      success: true,
      data: item
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// T·∫°o ƒë∆°n h√†ng m·ªõi
exports.createOrder = async (req, res) => {
  try {
    const { tableId, orderItems, customerName, customerPhone } = req.body;

    // Ki·ªÉm tra b√†n c√≥ t·ªìn t·∫°i kh√¥ng (ch·ªâ khi c√≥ tableId)
    if (tableId) {
      const table = await Table.findById(tableId);
      if (!table) {
        return res.status(404).json({ 
          success: false, 
          message: "Kh√¥ng t√¨m th·∫•y b√†n" 
        });
      }
    }

    // T·∫°o OrderItems (kh√¥ng merge ·ªü DB ƒë·ªÉ c√≥ th·ªÉ track t·ª´ng su·∫•t ri√™ng bi·ªát)
    const createdOrderItems = [];
    let totalAmount = 0;

    console.log('üì¶ Creating order items:', orderItems);

    for (const orderItem of orderItems) {
      let item;
      
      console.log('üîç Processing order item:', orderItem);
      
      // Ki·ªÉm tra type ƒë·ªÉ x√°c ƒë·ªãnh t√¨m trong Menu hay Item
      if (orderItem.type === 'menu') {
        item = await Menu.findById(orderItem.itemId);
        if (!item) {
          console.log('‚ùå Menu not found:', orderItem.itemId);
          return res.status(404).json({ 
            success: false, 
            message: `Kh√¥ng t√¨m th·∫•y menu v·ªõi ID: ${orderItem.itemId}` 
          });
        }
      } else {
        item = await Item.findById(orderItem.itemId);
        if (!item) {
          console.log('‚ùå Item not found:', orderItem.itemId);
          return res.status(404).json({ 
            success: false, 
            message: `Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn v·ªõi ID: ${orderItem.itemId}` 
          });
        }
      }

      console.log('‚úÖ Found item:', item.name, 'Price:', item.price);

      // T·∫°o OrderItem ri√™ng bi·ªát cho m·ªói su·∫•t (quantity = 1)
      for (let i = 0; i < orderItem.quantity; i++) {
        const newOrderItem = new OrderItem({
          itemId: orderItem.itemId,
          itemName: item.name,
          itemType: orderItem.type,
          quantity: 1, // M·ªói OrderItem ch·ªâ c√≥ quantity = 1
          price: item.price,
          note: orderItem.note || "",
        });

        console.log('üíæ Saving order item:', newOrderItem);
        await newOrderItem.save();
        console.log('‚úÖ Order item saved with ID:', newOrderItem._id);
        
        createdOrderItems.push(newOrderItem._id);
        totalAmount += item.price;
      }
    }

    console.log('üìã Created order items:', createdOrderItems);
    console.log('üí∞ Total amount:', totalAmount);

    // T·∫°o Payment
    const payment = new Payment({
      paymentMethod: "cash", // M·∫∑c ƒë·ªãnh thanh to√°n ti·ªÅn m·∫∑t
      status: "unpaid",
      amountPaid: 0,
      totalAmount: totalAmount
    });
    await payment.save();

    // T·∫°o Order
    const order = new Order({
      tableId: tableId,
      orderItems: createdOrderItems,
      paymentId: payment._id,
      status: "pending",
      totalAmount: totalAmount,
      discount: 0,
      customerName: customerName || "Kh√°ch v√£ng lai",
      customerPhone: customerPhone || ""
    });

    await order.save();
    console.log('‚úÖ Order saved with ID:', order._id);

    // C·∫≠p nh·∫≠t OrderItems v·ªõi orderId
    console.log('üîó Updating order items with orderId:', order._id);
    const updateResult = await OrderItem.updateMany(
      { _id: { $in: createdOrderItems } },
      { orderId: order._id }
    );
    console.log('‚úÖ Order items updated:', updateResult);

    // C·∫≠p nh·∫≠t Payment v·ªõi orderId
    payment.orderId = order._id;
    await payment.save();

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedOrder = await Order.findById(order._id)
      .populate("orderItems")
      .populate("tableId")
      .populate("paymentId");

    // Emit WebSocket event ƒë·ªÉ c·∫≠p nh·∫≠t real-time
    const io = req.app.get("io");
    if (io) {
      io.to(`order-${order._id}`).emit("order-updated", populatedOrder);
    }

    res.status(201).json({
      success: true,
      message: "ƒê·∫∑t m√≥n th√†nh c√¥ng",
      data: populatedOrder
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
exports.getOrderById = async (req, res) => {
  try {
    const { orderId } = req.params;
    const order = await Order.findById(orderId)
      .populate('tableId', 'tableNumber')
      .populate('orderItems')
      .populate('paymentId');

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Populate th√¥ng tin item trong orderItems
    for (let i = 0; i < order.orderItems.length; i++) {
      const orderItem = order.orderItems[i];
      if (orderItem.itemId) {
        // T√¨m trong c·∫£ Item v√† Menu
        let item = await Item.findById(orderItem.itemId);
        if (!item) {
          item = await Menu.findById(orderItem.itemId);
        }
        orderItem.itemId = item;
      }
    }

    res.status(200).json({
      success: true,
      data: order
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};

// Th√™m m√≥n m·ªõi v√†o order hi·ªán c√≥
exports.addItemsToOrder = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { orderItems } = req.body;

    // Ki·ªÉm tra order t·ªìn t·∫°i
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra order ch∆∞a b·ªã h·ªßy
    if (order.status === 'cancelled') {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ th√™m m√≥n v√†o ƒë∆°n h√†ng ƒë√£ b·ªã h·ªßy"
      });
    }

    // T·∫°o OrderItems m·ªõi (m·ªói su·∫•t l√† 1 OrderItem ri√™ng bi·ªát)
    const createdOrderItems = [];
    let additionalAmount = 0;

    for (const orderItem of orderItems) {
      let item;
      
      // Ki·ªÉm tra type ƒë·ªÉ x√°c ƒë·ªãnh t√¨m trong Menu hay Item
      if (orderItem.type === 'menu') {
        item = await Menu.findById(orderItem.itemId);
        if (!item) {
          return res.status(404).json({ 
            success: false, 
            message: `Kh√¥ng t√¨m th·∫•y menu v·ªõi ID: ${orderItem.itemId}` 
          });
        }
      } else {
        item = await Item.findById(orderItem.itemId);
        if (!item) {
          return res.status(404).json({ 
            success: false, 
            message: `Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn v·ªõi ID: ${orderItem.itemId}` 
          });
        }
      }

      // T·∫°o OrderItem ri√™ng bi·ªát cho m·ªói su·∫•t (quantity = 1)
      for (let i = 0; i < orderItem.quantity; i++) {
        const newOrderItem = new OrderItem({
          orderId: orderId,
          itemId: orderItem.itemId,
          itemName: item.name,
          itemType: orderItem.type,
          quantity: 1, // M·ªói OrderItem ch·ªâ c√≥ quantity = 1
          price: item.price,
          status: "pending",
          note: orderItem.note || "",
        });

        await newOrderItem.save();
        createdOrderItems.push(newOrderItem._id);
        additionalAmount += item.price;
        console.log(`‚ûï Added new item: ${item.name} (su·∫•t ${i + 1})`);
      }
    }

    // C·∫≠p nh·∫≠t order v·ªõi orderItems m·ªõi v√† totalAmount
    order.orderItems.push(...createdOrderItems);
    order.totalAmount += additionalAmount;
    await order.save();

    // C·∫≠p nh·∫≠t Payment v·ªõi totalAmount m·ªõi
    const payment = await Payment.findById(order.paymentId);
    if (payment) {
      payment.totalAmount = order.totalAmount;
      await payment.save();
    }

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedOrder = await Order.findById(order._id)
      .populate("orderItems")
      .populate("tableId")
      .populate("paymentId");

    res.status(200).json({
      success: true,
      message: "Th√™m m√≥n th√†nh c√¥ng",
      data: populatedOrder
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// H·ªßy m√≥n c√≥ status pending
exports.cancelOrderItem = async (req, res) => {
  try {
    const { orderId, orderItemId } = req.params;

    // Ki·ªÉm tra order t·ªìn t·∫°i
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra orderItem t·ªìn t·∫°i v√† thu·ªôc v·ªÅ order n√†y
    const orderItem = await OrderItem.findById(orderItemId);
    if (!orderItem || orderItem.orderId.toString() !== orderId) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y m√≥n trong ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra orderItem c√≥ status pending
    if (orderItem.status !== 'pending') {
      return res.status(400).json({
        success: false,
        message: "Ch·ªâ c√≥ th·ªÉ h·ªßy m√≥n c√≥ tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω"
      });
    }

    // T√≠nh to√°n amount c·∫ßn tr·ª´
    const itemAmount = orderItem.price * orderItem.quantity;

    // X√≥a orderItem kh·ªèi DB
    await OrderItem.findByIdAndDelete(orderItemId);

    // Remove kh·ªèi order.orderItems array
    order.orderItems = order.orderItems.filter(id => id.toString() !== orderItemId);
    
    // C·∫≠p nh·∫≠t totalAmount
    order.totalAmount -= itemAmount;
    await order.save();

    // C·∫≠p nh·∫≠t Payment v·ªõi totalAmount m·ªõi
    const payment = await Payment.findById(order.paymentId);
    if (payment) {
      payment.totalAmount = order.totalAmount;
      await payment.save();
    }

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedOrder = await Order.findById(order._id)
      .populate("orderItems")
      .populate("tableId")
      .populate("paymentId");

    res.status(200).json({
      success: true,
      message: "H·ªßy m√≥n th√†nh c√¥ng",
      data: populatedOrder
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// Update order status
exports.updateOrderStatus = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { status } = req.body;

    // Validate status
    const validStatuses = ['pending', 'confirmed', 'preparing', 'ready', 'served', 'cancelled'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"
      });
    }

    // Find and update order
    const order = await Order.findByIdAndUpdate(
      orderId,
      { status },
      { new: true }
    ).populate("orderItems")
     .populate("tableId")
     .populate("paymentId");

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Emit WebSocket event ƒë·ªÉ c·∫≠p nh·∫≠t real-time
    const io = req.app.get("io");
    if (io) {
      io.to(`order-${order._id}`).emit("order-updated", order);
    }

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
      data: order
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// T·∫°o feedback cho order ƒë√£ thanh to√°n
exports.createFeedback = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { rating, comment } = req.body;

    // Ki·ªÉm tra order t·ªìn t·∫°i
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra order ƒë√£ thanh to√°n ch∆∞a
    if (order.status !== 'paid') {
      return res.status(400).json({
        success: false,
        message: "Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° ƒë∆°n h√†ng ƒë√£ thanh to√°n"
      });
    }

    // Ki·ªÉm tra ƒë√£ c√≥ feedback cho order n√†y ch∆∞a
    const existingFeedback = await Feedback.findOne({ orderId: orderId });
    if (existingFeedback) {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√°"
      });
    }

    // Validate rating
    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({
        success: false,
        message: "ƒê√°nh gi√° ph·∫£i t·ª´ 1 ƒë·∫øn 5 sao"
      });
    }

    // T·∫°o feedback m·ªõi
    const feedback = new Feedback({
      orderId: orderId,
      userId: order.userId || null, // c√≥ th·ªÉ null n·∫øu kh√°ch kh√¥ng ƒëƒÉng nh·∫≠p
      rating: rating,
      comment: comment || ""
    });

    await feedback.save();

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedFeedback = await Feedback.findById(feedback._id)
      .populate("orderId", "_id status totalAmount")
      .populate("userId", "name email");

    res.status(201).json({
      success: true,
      message: "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!",
      data: populatedFeedback
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// L·∫•y feedback c·ªßa m·ªôt order
exports.getOrderFeedback = async (req, res) => {
  try {
    const { orderId } = req.params;

    const feedback = await Feedback.findOne({ orderId: orderId })
      .populate("orderId", "_id status totalAmount")
      .populate("userId", "name email");

    if (!feedback) {
      return res.status(404).json({
        success: false,
        message: "Ch∆∞a c√≥ ƒë√°nh gi√° cho ƒë∆°n h√†ng n√†y"
      });
    }

    res.status(200).json({
      success: true,
      data: feedback
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};

// Ki·ªÉm tra order c√≥ th·ªÉ feedback kh√¥ng
exports.canFeedback = async (req, res) => {
  try {
    const { orderId } = req.params;

    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra ƒë√£ c√≥ feedback ch∆∞a
    const existingFeedback = await Feedback.findOne({ orderId: orderId });
    if (existingFeedback) {
      return res.status(200).json({
        success: true,
        canFeedback: false,
        message: "ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√°",
        feedback: existingFeedback
      });
    }

    // Ki·ªÉm tra order ƒë√£ thanh to√°n ch∆∞a
    const canFeedback = order.status === 'paid';

    res.status(200).json({
      success: true,
      canFeedback: canFeedback,
      message: canFeedback ? "C√≥ th·ªÉ ƒë√°nh gi√° ƒë∆°n h√†ng" : "Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° ƒë∆°n h√†ng ƒë√£ thanh to√°n",
      orderStatus: order.status
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
};
