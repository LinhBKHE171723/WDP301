const User = require("../models/User");
const cloudinary = require("../config/cloudinary");
const jwt = require("jsonwebtoken");

exports.getProfile = async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select("-password");
        if (!user) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

        res.status(200).json({ success: true, user });
    } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y profile:", err);
        res.status(500).json({ success: false, message: err.message });
    }
};


exports.updateProfile = async (req, res) => {
    try {
        console.log("User ID t·ª´ JWT:", req.user);
        console.log("üì¶ req.body:", req.body);
        console.log("üìÅ req.file:", req.file);
        const userId = req.user.id; // l·∫•y t·ª´ JWT middleware
        const { name, phone } = req.body;
        let avatar = req.body.avatar;

        // N·∫øu c√≥ file upload t·ª´ frontend (multer)
        if (req.file) {
            const result = await cloudinary.uploader.upload(req.file.path, {
                folder: "restaurant_profiles",
            });
            avatar = result.secure_url;
        }

        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { name, phone, avatar },
            { new: true, runValidators: true }
        ).select("-password"); // ·∫®n m·∫≠t kh·∫©u

        // T·∫°o token m·ªõi v·ªõi th√¥ng tin c·∫≠p nh·∫≠t ƒë·ªÉ c·∫≠P nh·∫≠t giao di·ªán
        const newToken = jwt.sign(
            {
                id: updatedUser._id,
                role: updatedUser.role,
                username: updatedUser.username,
                avatar: updatedUser.avatar,
                name: updatedUser.name,
                email: updatedUser.email,
                phone: updatedUser.phone,
            },
            process.env.JWT_SECRET,
            { expiresIn: process.env.JWT_EXPIRES_IN }
        );

        if (!updatedUser) {
            return res
                .status(404)
                .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }

        // Tr·∫£ v·ªÅ user ƒë√£ c·∫≠p nh·∫≠t
        res.status(200).json({
            success: true,
            message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
            user: updatedUser,
            token: newToken, // üëà tr·∫£ token m·ªõi v·ªÅ
        });
    } catch (err) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t profile:", err);
        res
            .status(500)
            .json({ success: false, message: err.message || "L·ªói server" });
    }
};
