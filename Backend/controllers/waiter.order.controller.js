const Order = require("../models/Order");
const OrderItem = require("../models/OrderItem");
const Table = require("../models/Table");
const User = require("../models/User");
const mongoose = require("mongoose");
const { populateOrderItemDetails } = require("../utils/customerHelpers");

// L·∫•y danh s√°ch ƒë∆°n h√†ng c·∫ßn x√°c nh·∫≠n t·ª´ waiter
exports.getPendingOrders = async (req, res) => {
  try {
    const orders = await Order.find({
      status: "pending",
      "waiterResponse.status": "pending"
    })
      .populate('tableId', 'tableNumber')
      .populate('orderItems')
      .populate('userId', 'name')
      .populate('servedBy', 'name email')
      .sort({ createdAt: -1 });

    // Populate th√¥ng tin item trong orderItems
    for (const order of orders) {
      await populateOrderItemDetails(order.orderItems);
    }

    res.status(200).json({
      success: true,
      data: orders
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};

// Waiter ph·∫£n h·ªìi ƒë∆°n h√†ng (x√°c nh·∫≠n ho·∫∑c t·ª´ ch·ªëi)
exports.respondToOrder = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { approved, reason, selectedTable } = req.body;
    const waiterId = req.user.id; // l·∫•y t·ª´ middleware auth

    // Validate input
    if (typeof approved !== 'boolean') {
      return res.status(400).json({ success: false, message: "'approved' ph·∫£i l√† boolean" });
    }
    if (!approved && (!reason || reason.trim() === '')) {
      return res.status(400).json({ success: false, message: "L√Ω do t·ª´ ch·ªëi l√† b·∫Øt bu·ªôc" });
    }

    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    // Validate table selection for approval
    if (approved && !selectedTable && !order.tableId) {
      return res.status(400).json({ success: false, message: "C·∫ßn ch·ªçn b√†n khi x√°c nh·∫≠n" });
    }

    if (order.waiterResponse.status !== 'pending') {
      return res.status(400).json({ success: false, message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c waiter ph·∫£n h·ªìi tr∆∞·ªõc ƒë√≥" });
    }

    // n·∫øu waiter x√°c nh·∫≠n
    if (approved) {
      let table;
      let finalTableId;
      
      // üéØ ∆Øu ti√™n b√†n m√† waiter ch·ªçn (n·∫øu c√≥)
      if (selectedTable) {
        table = await Table.findById(selectedTable);
        if (!table) {
          return res.status(404).json({ 
            success: false, 
            message: "B√†n kh√¥ng t·ªìn t·∫°i" 
          });
        }
        
        // ‚úÖ Cho ph√©p nhi·ªÅu order tr√™n c√πng m·ªôt b√†n
        // Ch·ªâ ki·ªÉm tra n·∫øu b√†n kh√¥ng t·ªìn t·∫°i, kh√¥ng ki·ªÉm tra status occupied
        finalTableId = selectedTable;
        console.log(`‚úÖ Waiter ch·ªçn b√†n: ${table.tableNumber}`);
        
      } else if (order.tableId) {
        // üîÑ Fallback: S·ª≠ d·ª•ng b√†n auto-assigned
        table = await Table.findById(order.tableId);
        if (!table) {
          return res.status(404).json({ 
            success: false, 
            message: "B√†n auto-assigned kh√¥ng t·ªìn t·∫°i" 
          });
        }
        
        finalTableId = order.tableId;
        console.log(`‚úÖ S·ª≠ d·ª•ng b√†n auto-assigned: ${table.tableNumber}`);
        
      } else {
        // ‚ùå Kh√¥ng c√≥ b√†n n√†o ƒë∆∞·ª£c ch·ªçn
        return res.status(400).json({ 
          success: false, 
          message: "C·∫ßn ch·ªçn b√†n khi x√°c nh·∫≠n ƒë∆°n h√†ng" 
        });
      }
      
      // üîÑ C·∫≠p nh·∫≠t tableId cho order (n·∫øu kh√°c v·ªõi b√†n hi·ªán t·∫°i)
      let oldTableId = null;
      if (order.tableId?.toString() !== finalTableId.toString()) {
        oldTableId = order.tableId;
        order.tableId = new mongoose.Types.ObjectId(finalTableId);
        console.log(`üîÑ Order ${order._id} ƒë∆∞·ª£c c·∫≠p nh·∫≠t tableId: ${order.tableId}`);
        
        // üßπ X·ª≠ l√Ω b√†n c≈© (n·∫øu c√≥)
        if (oldTableId) {
          const oldTable = await Table.findById(oldTableId);
          if (oldTable && oldTable.orderNow) {
            oldTable.orderNow = oldTable.orderNow.filter(oid => oid.toString() !== order._id.toString());
            if (oldTable.orderNow.length === 0) {
              oldTable.status = "available";
            }
            await oldTable.save();
            console.log(`üßπ ƒê√£ x√≥a order kh·ªèi b√†n c≈©: ${oldTable.tableNumber}`);
          }
        }
      }

      // T√¨m ng∆∞·ªùi ph·ª•c v·ª•
      const waiter = await User.findById(waiterId);
      if (!waiter) {
        return res.status(404).json({ 
          success: false, 
          message: "Nh√¢n vi√™n ph·ª•c v·ª• kh√¥ng t·ªìn t·∫°i" 
        });
      }

      order.servedBy = new mongoose.Types.ObjectId(waiter._id);
      order.waiterResponse.status = 'approved';
      order.waiterResponse.reason = null;
      order.waiterResponse.respondedAt = new Date();

      // Table chuy·ªÉn sang occupied v√† th√™m order v√†o m·∫£ng
      table.status = 'occupied';
      if (!table.orderNow.includes(order._id)) {
        table.orderNow.push(order._id);
      }
      await table.save();
    } else {
      // ‚ùå T·ª´ ch·ªëi
      order.waiterResponse.status = 'rejected';
      order.waiterResponse.reason = reason.trim();
      order.waiterResponse.respondedAt = new Date();
    }

    // L∆∞u l·ªãch s·ª≠
    order.confirmationHistory.push({
      action: approved ? 'waiter_approved' : 'waiter_rejected',
      timestamp: new Date(),
      details: approved ? `Waiter ${waiterId} x√°c nh·∫≠n ƒë∆°n` : `Waiter t·ª´ ch·ªëi: ${reason.trim()}`
    });

    await order.save();
    
    console.log(`üíæ Order ${order._id} ƒë√£ ƒë∆∞·ª£c save v·ªõi tableId: ${order.tableId}`);

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ cho UI b√™n ph√≠a kh√°ch h√†ng
    const populatedOrder = await Order.findById(order._id)
      .populate("orderItems")
      .populate("tableId")
      .populate("paymentId")
      .populate("userId", "name")
      .populate("servedBy", "name email");

    // Emit WebSocket event ƒë·ªÉ c·∫≠p nh·∫≠t real-time cho kh√°ch h√†ng 
    const webSocketService = req.app.get("webSocketService");
    if (webSocketService) {
      const eventType = approved ? "order:waiter_approved" : "order:waiter_rejected";
      webSocketService.broadcastToOrder(order._id, eventType, {
        order: populatedOrder,
        waiterResponse: order.waiterResponse
      });
    }

    res.status(200).json({
      success: true,
      message: approved ? "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng" : "ƒê√£ t·ª´ ch·ªëi ƒë∆°n h√†ng",
      data: populatedOrder
    });
  } catch (error) {
    console.error("Error in respondToOrder:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};


// L·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang ph·ª•c v·ª• (ƒë√£ x√°c nh·∫≠n)
exports.getActiveOrders = async (req, res) => {
  try {
    const orders = await Order.find({
      status: { $in: ["confirmed", "preparing", "ready"] }
    })
      .populate('tableId', 'tableNumber')
      .populate('orderItems')
      .populate('userId', 'name')
      .populate('servedBy', 'name email')
      .sort({ createdAt: -1 });

    // Populate th√¥ng tin item trong orderItems
    for (const order of orders) {
      await populateOrderItemDetails(order.orderItems);
    }

    res.status(200).json({
      success: true,
      orders: orders
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (t·ª´ confirmed ‚Üí served)
exports.updateOrderStatus = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { status } = req.body;

    // Validate status
    const validStatuses = ['confirmed', 'preparing', 'ready', 'served'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"
      });
    }

    // Find and update order
    const order = await Order.findByIdAndUpdate(
      orderId,
      {
        status,
        servedAt: status === 'served' ? new Date() : order.servedAt
      },
      { new: true }
    ).populate("orderItems")
      .populate("tableId")
      .populate("paymentId")
      .populate("userId", "name");

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Populate th√¥ng tin item trong orderItems
    await populateOrderItemDetails(order.orderItems);

    // Emit WebSocket event ƒë·ªÉ c·∫≠p nh·∫≠t real-time
    const webSocketService = req.app.get("webSocketService");
    if (webSocketService) {
      webSocketService.broadcastToOrder(order._id, "order:updated", order);
    }

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
      data: order
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};


