const jwt = require("jsonwebtoken");

// üßæ T·∫°o Access Token (th·ªùi h·∫°n ng·∫Øn, d√πng khi g·ªçi API)
function signAccessToken(payload) {
  return jwt.sign(payload, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES || "1d",
  });
}

// üîÅ H√†m t·∫°o Refresh Token
// ‚û§ Refresh Token c√≥ th·ªùi h·∫°n d√†i h∆°n (th∆∞·ªùng 30 ng√†y).
// ‚û§ D√πng ƒë·ªÉ l·∫•y Access Token m·ªõi khi Access Token h·∫øt h·∫°n.
function signRefreshToken(payload) {
  return jwt.sign(payload, process.env.REFRESH_SECRET, {
    expiresIn: process.env.REFRESH_EXPIRES || "30d",
  });
}

// üß© H√†m tr√≠ch xu·∫•t token t·ª´ request
// ‚û§ ∆Øu ti√™n l·∫•y t·ª´ header Authorization (Bearer token)
// ‚û§ N·∫øu kh√¥ng c√≥ th√¨ th·ª≠ l·∫•y t·ª´ cookie (tr∆∞·ªùng h·ª£p login b·∫±ng cookie)
function extractToken(req) {
  const authHeader = req.headers.authorization || "";
  const match = /^Bearer\s+(.+)$/i.exec(authHeader);
  if (match && match[1]) return match[1].trim();

  if (req.cookies?.accessToken) return req.cookies.accessToken;

  return null;
}

// üõ°Ô∏è Middleware x√°c th·ª±c (authentication)
// ‚û§ D√πng ·ªü m·ªçi route y√™u c·∫ßu login (v√≠ d·ª• /api/orders)
// ‚û§ Ki·ªÉm tra token h·ª£p l·ªá, gi·∫£i m√£ ƒë·ªÉ l·∫•y user info.
function authRequired(req, res, next) {
  // Khi tr√¨nh duy·ªát g·ª≠i m·ªôt request c√≥ x√°c th·ª±c ho·∫∑c header ƒë·∫∑c bi·ªát (nh∆∞ Authorization: Bearer ...),
  // n√≥ s·∫Ω g·ª≠i tr∆∞·ªõc m·ªôt request ‚ÄúthƒÉm d√≤‚Äù g·ªçi l√† preflight request ƒë·ªÉ xem c√≥ ch·∫•p nh·∫≠n CORS ko. return next ƒë·ªÉ b·ªè qua preflight request
  if (req.method === "OPTIONS") return next(); 

  const token = extractToken(req);
  if (!token) {
    // N·∫øu kh√¥ng c√≥ token ‚Üí tr·∫£ l·ªói 401 Unauthorized
    return next({ status: 401, message: "Y√™u c·∫ßu c·∫ßn token ƒë·ªÉ x√°c th·ª±c." });
  }

  try {
    // ‚úÖ Gi·∫£i m√£ & verify token b·∫±ng secret c·ªßa server v√† tr·∫£ v·ªÅ payload l√† 1 object
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c v√†o req.user ƒë·ªÉ route kh√°c d√πng
    req.user = {
      id: String(decoded.id || ""),
      role: decoded.role,
      username: decoded.username,
      name: decoded.name,
      email: decoded.email,
    };
    // N·∫øu token kh√¥ng c√≥ id th√¨ xem nh∆∞ kh√¥ng h·ª£p l·ªá
    if (!req.user.id) {
      return next({
        status: 401,
        message: "Token kh√¥ng ch·ª©a th√¥ng tin h·ª£p l·ªá.",
      });
    }
    // Cho ph√©p ƒëi ti·∫øp ƒë·∫øn route controller
    next();
  } catch (err) {
    console.error(err);
    // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
    return next({
      status: 401,
      message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.",
    });
  }
}

// üîí Middleware ki·ªÉm tra quy·ªÅn (authorization)
// ‚û§ D√πng sau authRequired ƒë·ªÉ ƒë·∫£m b·∫£o user c√≥ quy·ªÅn truy c·∫≠p route.
// V√≠ d·ª•: roleRequired('chef') cho ph√©p ch·ªâ ƒë·∫ßu b·∫øp truy c·∫≠p.
function roleRequired(...roles) {
  return (req, res, next) => {
    // N·∫øu ch∆∞a x√°c th·ª±c user
    if (!req.user) {
      return next({
        status: 401,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.",
      });
    }
    // // N·∫øu role c·ªßa user kh√¥ng n·∫±m trong danh s√°ch cho ph√©p
    if (!roles.includes(req.user.role)) {
      return next({
        status: 403,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y.",
      });
    }
    
    next(); // Role h·ª£p l·ªá, cho ph√©p ƒëi ti·∫øp
  };
}

module.exports = {
  signAccessToken,
  signRefreshToken,
  authRequired,
  roleRequired,
};
