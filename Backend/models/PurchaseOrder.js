const mongoose = require("mongoose");
const { Schema } = mongoose;

const purchaseOrderSchema = new Schema({
  ingredientId: {
    type: Schema.Types.ObjectId,
    ref: "Ingredient",
    required: true,
  },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  price: { type: Number, required: true },

  time: { type: Date, default: Date.now },
});

// ‚úÖ Sau khi l∆∞u PurchaseOrder ‚Üí c·∫≠p nh·∫≠t l·∫°i Ingredient
purchaseOrderSchema.post("save", async function (doc, next) {
  try {
    const Ingredient = mongoose.model("Ingredient");
    const ingredient = await Ingredient.findById(doc.ingredientId);

    if (!ingredient) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ingredient c√≥ id ${doc.ingredientId}`);
      return next();
    }

    // ·ªû ƒë√¢y doc.price l√† gi√° ƒë∆°n v·ªã (VNƒê / 1 ƒë∆°n v·ªã h√†ng)
    // => Kh√¥ng c·∫ßn chia cho quantity n·ªØa
    const newUnitPrice = doc.price;

    // T·ªïng gi√° tr·ªã kho c≈© + t·ªïng gi√° tr·ªã l√¥ m·ªõi
    const totalStockValue =
      ingredient.priceNow * ingredient.stockQuantity +
      newUnitPrice * doc.quantity;

    // T·ªïng s·ªë l∆∞·ª£ng m·ªõi
    const totalStockQty = ingredient.stockQuantity + doc.quantity;

    // C·∫≠p nh·∫≠t gi√° trung b√¨nh m·ªõi
    ingredient.priceNow =
      totalStockQty > 0 ? totalStockValue / totalStockQty : newUnitPrice;
    ingredient.stockQuantity = totalStockQty;

    await ingredient.save();

    console.log(
      `üì¶ ƒê√£ c·∫≠p nh·∫≠t Ingredient "${
        ingredient.name
      }": priceNow = ${ingredient.priceNow.toFixed(2)}, stockQuantity = ${
        ingredient.stockQuantity
      }`
    );

    next();
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t Ingredient sau khi nh·∫≠p h√†ng:", error);
    next(error);
  }
});

module.exports = mongoose.model("PurchaseOrder", purchaseOrderSchema);
