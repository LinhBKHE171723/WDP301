const mongoose = require("mongoose");
const User = require("../models/User");
const Ingredient = require("../models/Ingredient");
const Item = require("../models/Item");
const Menu = require("../models/Menu");
const Table = require("../models/Table");
const Order = require("../models/Order");
const OrderItem = require("../models/OrderItem");
const Payment = require("../models/Payment");
const Feedback = require("../models/Feedback");
const PurchaseOrder = require("../models/PurchaseOrder");

const seedDatabase = async () => {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu seed database...");

    // 1Ô∏è‚É£ X√≥a to√†n b·ªô d·ªØ li·ªáu c≈©
    await Promise.all([
      User.deleteMany(),
      Ingredient.deleteMany(),
      Item.deleteMany(),
      Menu.deleteMany(),
      Table.deleteMany(),
      Order.deleteMany(),
      OrderItem.deleteMany(),
      Payment.deleteMany(),
      Feedback.deleteMany(),
      PurchaseOrder.deleteMany(),
    ]);
    console.log("üßπ ƒê√£ xo√° to√†n b·ªô d·ªØ li·ªáu c≈©.");

    // 2Ô∏è‚É£ T·∫°o user m·∫´u (d√πng for ƒë·ªÉ trigger pre-save hash)
    const userData = [
      {
        name: "Nguy·ªÖn VƒÉn Kh√°ch",
        username: "customer01",
        password: "customer123",
        email: "customer@example.com",
        phone: "0123456789",
        role: "customer",
        point: 100,
      },
      {
        name: "Tr·∫ßn Th·ªã Ph·ª•c V·ª• 1",
        username: "waiter01",
        password: "waiter1@123",
        email: "waiter1@example.com",
        phone: "0987654321",
        role: "waiter",
      },
      {
        name: "Ph·∫°m VƒÉn Ph·ª•c V·ª• 2",
        username: "waiter02",
        password: "waiter2@123",
        email: "waiter2@example.com",
        phone: "0987654322",
        role: "waiter",
      },
      {
        name: "L√™ Th·ªã Ph·ª•c V·ª• 3",
        username: "waiter03",
        password: "waiter3@123",
        email: "waiter3@example.com",
        phone: "0987654323",
        role: "waiter",
      },
      {
        name: "ƒê·∫ßu B·∫øp Tr∆∞·ªüng",
        username: "chef01",
        password: "chef@123",
        email: "chef@example.com",
        phone: "0908888999",
        role: "chef",
      },
      {
        name: "Qu·∫£n L√Ω B·∫øp",
        username: "kitchen01",
        password: "kitchen@123",
        email: "kitchen@example.com",
        phone: "0908888988",
        role: "kitchen_manager",
      },
      {
        name: "Admin Nh√† H√†ng",
        username: "admin01",
        password: "admin@123",
        email: "admin@example.com",
        phone: "0909999000",
        role: "admin",
      },
    ];

    const users = [];
    for (const data of userData) {
      const user = await User.create(data); // middleware hash password
      users.push(user);
      console.log(`‚úÖ T·∫°o user: ${user.username}`);
    }

    const customer = users.find((u) => u.role === "customer");
    const waiters = users.filter((u) => u.role === "waiter");
    const chef = users.find((u) => u.role === "chef");

    // 3Ô∏è‚É£ Nguy√™n li·ªáu
    const ingredients = await Ingredient.insertMany([
      { name: "Th·ªãt b√≤", unit: "kg", stockQuantity: 50, minStock: 10 },
      { name: "C√° h·ªìi", unit: "kg", stockQuantity: 30, minStock: 5 },
      { name: "Khoai t√¢y", unit: "kg", stockQuantity: 40, minStock: 8 },
      { name: "Rau x√† l√°ch", unit: "b√≥", stockQuantity: 60, minStock: 10 },
      { name: "Tr·ª©ng g√†", unit: "qu·∫£", stockQuantity: 100, minStock: 20 },
      { name: "T√¥m t∆∞∆°i", unit: "kg", stockQuantity: 45, minStock: 10 },
      { name: "Ph√¥ mai", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "B·ªôt m√¨", unit: "kg", stockQuantity: 30, minStock: 8 },
      { name: "Th·ªãt g√†", unit: "kg", stockQuantity: 35, minStock: 5 },
      { name: "·ªöt chu√¥ng", unit: "kg", stockQuantity: 20, minStock: 3 },
      { name: "C√† chua", unit: "kg", stockQuantity: 40, minStock: 8 },
      { name: "H√†nh t√¢y", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "B∆°", unit: "h·ªôp", stockQuantity: 15, minStock: 3 },
      { name: "N∆∞·ªõc m·∫Øm", unit: "chai", stockQuantity: 50, minStock: 10 },
      { name: "T·ªèi", unit: "kg", stockQuantity: 30, minStock: 6 },
    ]);

    // 4Ô∏è‚É£ M√≥n ƒÉn
    const items = await Item.insertMany([
      {
        name: "B√≤ B√≠t T·∫øt",
        description: "Th·ªãt b√≤ √öc n∆∞·ªõng ch·∫£o gang, k√®m khoai t√¢y chi√™n",
        category: "M√≥n ch√≠nh",
        price: 250000,
        ingredients: [
          ingredients.find((i) => i.name === "Th·ªãt b√≤")._id,
          ingredients.find((i) => i.name === "Khoai t√¢y")._id,
        ],
      },
      {
        name: "C√° H·ªìi √Åp Ch·∫£o",
        description: "C√° h·ªìi Na Uy s·ªët chanh d√¢y",
        category: "M√≥n ch√≠nh",
        price: 280000,
        ingredients: [ingredients.find((i) => i.name === "C√° h·ªìi")._id],
      },
      {
        name: "T√¥m Tempura",
        description: "T√¥m chi√™n x√π ki·ªÉu Nh·∫≠t",
        category: "M√≥n ch√≠nh",
        price: 180000,
        ingredients: [
          ingredients.find((i) => i.name === "T√¥m t∆∞∆°i")._id,
          ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
        ],
      },
      {
        name: "Salad Rau C·ªß",
        description: "Rau c·ªß t∆∞∆°i tr·ªôn d·∫ßu gi·∫•m",
        category: "Khai v·ªã",
        price: 70000,
        ingredients: [ingredients.find((i) => i.name === "Rau x√† l√°ch")._id],
      },
    ]);

    // 5Ô∏è‚É£ B√†n ƒÉn (20 b√†n)
    const tables = await Promise.all(
      Array.from({ length: 20 }, (_, i) =>
        Table.create({
          tableNumber: i + 1,
          qrCode: `QR_TABLE_${i + 1}`,
          status: i < 10 ? "occupied" : "available",
        })
      )
    );

    // 6Ô∏è‚É£ T·∫°o order cho 10 b√†n ƒë·∫ßu
    for (let i = 0; i < 10; i++) {
      const table = tables[i];
      const selectedItems = [];

      for (let j = 0; j < 3; j++) {
        const randomItem = items[Math.floor(Math.random() * items.length)];
        const orderItem = await OrderItem.create({
          itemId: randomItem._id,
          itemName: randomItem.name,
          itemType: "item",
          quantity: Math.floor(Math.random() * 2) + 1,
          price: randomItem.price,
          assignedChef: chef._id,
          status: "preparing",
        });
        selectedItems.push(orderItem);
      }

      const payment = await Payment.create({
        paymentMethod: "card",
        status: "unpaid",
        amountPaid: 0,
      });

      const order = await Order.create({
        userId: customer._id,
        servedBy: waiters[i % waiters.length]._id,
        tableId: table._id,
        orderItems: selectedItems.map((oi) => oi._id),
        paymentId: payment._id,
        status: "preparing",
        totalAmount: selectedItems.reduce(
          (sum, oi) => sum + oi.price * oi.quantity,
          0
        ),
        discount: 0,
      });

      table.orderNow = order._id;
      await table.save();
    }

    console.log("‚úÖ SEED DATABASE TH√ÄNH C√îNG!");
  } catch (error) {
    console.error("‚ùå L·ªói khi seed database:", error);
  }
};

module.exports = seedDatabase;
