const mongoose = require("mongoose");
const User = require("../models/User");
const Ingredient = require("../models/Ingredient");
const Item = require("../models/Item");
const Menu = require("../models/Menu");
const Table = require("../models/Table");
const Order = require("../models/Order");
const OrderItem = require("../models/OrderItem");
const Payment = require("../models/Payment");
const Feedback = require("../models/Feedback");
const PurchaseOrder = require("../models/PurchaseOrder");

const seedDatabase = async () => {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu seed database...");

    // 1Ô∏è‚É£ X√≥a to√†n b·ªô d·ªØ li·ªáu c≈©
    await Promise.all([
      User.deleteMany(),
      Ingredient.deleteMany(),
      Item.deleteMany(),
      Menu.deleteMany(),
      Table.deleteMany(),
      Order.deleteMany(),
      OrderItem.deleteMany(),
      Payment.deleteMany(),
      Feedback.deleteMany(),
      PurchaseOrder.deleteMany(),
    ]);
    console.log("üßπ ƒê√£ xo√° to√†n b·ªô d·ªØ li·ªáu c≈©.");

    // 2Ô∏è‚É£ T·∫°o user m·∫´u (d√πng for ƒë·ªÉ trigger pre-save hash)
    const userData = [
      // Customers
      {
        name: "Nguy·ªÖn VƒÉn Kh√°ch",
        username: "customer01",
        password: "customer123",
        email: "customer@example.com",
        phone: "0123456789",
        role: "customer",
        point: 100,
      },
      {
        name: "Tr·∫ßn Th·ªã Minh",
        username: "customer02",
        password: "customer123",
        email: "customer02@example.com",
        phone: "0123456790",
        role: "customer",
        point: 250,
      },
      {
        name: "L√™ VƒÉn H√πng",
        username: "customer03",
        password: "customer123",
        email: "customer03@example.com",
        phone: "0123456791",
        role: "customer",
        point: 150,
      },
      {
        name: "Ph·∫°m Th·ªã Lan",
        username: "customer04",
        password: "customer123",
        email: "customer04@example.com",
        phone: "0123456792",
        role: "customer",
        point: 300,
      },
      {
        name: "Ho√†ng VƒÉn Nam",
        username: "customer05",
        password: "customer123",
        email: "customer05@example.com",
        phone: "0123456793",
        role: "customer",
        point: 80,
      },
      {
        name: "Ng√¥ Th·ªã Mai",
        username: "customer06",
        password: "customer123",
        email: "customer06@example.com",
        phone: "0123456794",
        role: "customer",
        point: 200,
      },
      {
        name: "ƒê·ªó VƒÉn Tu·∫•n",
        username: "customer07",
        password: "customer123",
        email: "customer07@example.com",
        phone: "0123456795",
        role: "customer",
        point: 120,
      },
      {
        name: "V≈© Th·ªã Hoa",
        username: "customer08",
        password: "customer123",
        email: "customer08@example.com",
        phone: "0123456796",
        role: "customer",
        point: 180,
      },
      {
        name: "B√πi VƒÉn ƒê·ª©c",
        username: "customer09",
        password: "customer123",
        email: "customer09@example.com",
        phone: "0123456797",
        role: "customer",
        point: 90,
      },
      {
        name: "ƒêinh Th·ªã Linh",
        username: "customer10",
        password: "customer123",
        email: "customer10@example.com",
        phone: "0123456798",
        role: "customer",
        point: 220,
      },
      // Waiters
      {
        name: "Tr·∫ßn Th·ªã Ph·ª•c V·ª• 1",
        username: "waiter01",
        password: "waiter1@123",
        email: "waiter1@example.com",
        phone: "0987654321",
        role: "waiter",
      },
      {
        name: "Ph·∫°m VƒÉn Ph·ª•c V·ª• 2",
        username: "waiter02",
        password: "waiter2@123",
        email: "waiter2@example.com",
        phone: "0987654322",
        role: "waiter",
      },
      {
        name: "L√™ Th·ªã Ph·ª•c V·ª• 3",
        username: "waiter03",
        password: "waiter3@123",
        email: "waiter3@example.com",
        phone: "0987654323",
        role: "waiter",
      },
      {
        name: "Nguy·ªÖn VƒÉn Ph·ª•c V·ª• 4",
        username: "waiter04",
        password: "waiter4@123",
        email: "waiter4@example.com",
        phone: "0987654324",
        role: "waiter",
      },
      {
        name: "Ho√†ng Th·ªã Ph·ª•c V·ª• 5",
        username: "waiter05",
        password: "waiter5@123",
        email: "waiter5@example.com",
        phone: "0987654325",
        role: "waiter",
      },
      // Chefs
      {
        name: "B√πi Kh√°nh Linh",
        username: "chef01",
        password: "chef@123",
        email: "chef@example.com",
        phone: "0908888999",
        role: "chef",
      },
      {
        name: "Phan Ti·∫øn M·∫°nh",
        username: "chef02",
        password: "chef@123",
        email: "chef02@example.com",
        phone: "0908888998",
        role: "chef",
      },
      {
        name: "Minh Ch√∫c",
        username: "chef03",
        password: "chef@123",
        email: "chef03@example.com",
        phone: "0908888997",
        role: "chef",
      },
      // Kitchen Managers
      {
        name: "Qu·∫£n L√Ω B·∫øp",
        username: "kitchen01",
        password: "kitchen@123",
        email: "kitchen@example.com",
        phone: "0908888988",
        role: "kitchen_manager",
      },
      {
        name: "Ph√≥ Qu·∫£n L√Ω B·∫øp",
        username: "kitchen02",
        password: "kitchen@123",
        email: "kitchen02@example.com",
        phone: "0908888987",
        role: "kitchen_manager",
      },
      // Admin
      {
        name: "Admin Nh√† H√†ng",
        username: "admin01",
        password: "admin@123",
        email: "admin@example.com",
        phone: "0909999000",
        role: "admin",
      },
    ];

    const users = [];
    for (const data of userData) {
      const user = await User.create(data); // middleware hash password
      users.push(user);
      console.log(`‚úÖ T·∫°o user: ${user.username}`);
    }

    const customer = users.find((u) => u.role === "customer");
    const waiters = users.filter((u) => u.role === "waiter");
    const chef = users.find((u) => u.role === "chef");

    // 3Ô∏è‚É£ Nguy√™n li·ªáu
    const ingredients = await Ingredient.insertMany([
      { name: "Th·ªãt b√≤", unit: "kg", stockQuantity: 50, minStock: 10 },
      { name: "C√° h·ªìi", unit: "kg", stockQuantity: 30, minStock: 5 },
      { name: "Khoai t√¢y", unit: "kg", stockQuantity: 40, minStock: 8 },
      { name: "Rau x√† l√°ch", unit: "b√≥", stockQuantity: 60, minStock: 10 },
      { name: "Tr·ª©ng g√†", unit: "qu·∫£", stockQuantity: 100, minStock: 20 },
      { name: "T√¥m t∆∞∆°i", unit: "kg", stockQuantity: 45, minStock: 10 },
      { name: "Ph√¥ mai", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "B·ªôt m√¨", unit: "kg", stockQuantity: 30, minStock: 8 },
      { name: "Th·ªãt g√†", unit: "kg", stockQuantity: 35, minStock: 5 },
      { name: "·ªöt chu√¥ng", unit: "kg", stockQuantity: 20, minStock: 3 },
      { name: "C√† chua", unit: "kg", stockQuantity: 40, minStock: 8 },
      { name: "H√†nh t√¢y", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "B∆°", unit: "h·ªôp", stockQuantity: 15, minStock: 3 },
      { name: "N∆∞·ªõc m·∫Øm", unit: "chai", stockQuantity: 50, minStock: 10 },
      { name: "T·ªèi", unit: "kg", stockQuantity: 30, minStock: 6 },
      // Th√™m nguy√™n li·ªáu m·ªõi
      { name: "Th·ªãt heo", unit: "kg", stockQuantity: 8, minStock: 10 }, // Stock th·∫•p ƒë·ªÉ test c·∫£nh b√°o
      { name: "C√° basa", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "M·ª±c t∆∞∆°i", unit: "kg", stockQuantity: 20, minStock: 5 },
      { name: "Cua bi·ªÉn", unit: "kg", stockQuantity: 15, minStock: 3 },
      { name: "N·∫•m h∆∞∆°ng", unit: "kg", stockQuantity: 12, minStock: 2 },
      { name: "Rau mu·ªëng", unit: "b√≥", stockQuantity: 30, minStock: 5 },
      { name: "Rau c·∫£i", unit: "b√≥", stockQuantity: 25, minStock: 5 },
      { name: "C√† r·ªët", unit: "kg", stockQuantity: 35, minStock: 8 },
      { name: "Khoai lang", unit: "kg", stockQuantity: 20, minStock: 5 },
      { name: "B√≠ ƒë·ªè", unit: "kg", stockQuantity: 15, minStock: 3 },
      { name: "D∆∞a chu·ªôt", unit: "kg", stockQuantity: 18, minStock: 4 },
      { name: "C√† t√≠m", unit: "kg", stockQuantity: 12, minStock: 3 },
      { name: "ƒê·∫≠u ph·ª•", unit: "mi·∫øng", stockQuantity: 50, minStock: 10 },
      { name: "M√¨ t√¥m", unit: "g√≥i", stockQuantity: 100, minStock: 20 },
      { name: "B√∫n t∆∞∆°i", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "Ph·ªü t∆∞∆°i", unit: "kg", stockQuantity: 20, minStock: 4 },
      { name: "G·∫°o", unit: "kg", stockQuantity: 200, minStock: 50 },
      { name: "D·∫ßu ƒÉn", unit: "chai", stockQuantity: 30, minStock: 5 },
      { name: "Mu·ªëi", unit: "kg", stockQuantity: 50, minStock: 10 },
      { name: "ƒê∆∞·ªùng", unit: "kg", stockQuantity: 40, minStock: 8 },
      { name: "Ti√™u", unit: "kg", stockQuantity: 15, minStock: 3 },
      { name: "·ªöt hi·ªÉm", unit: "kg", stockQuantity: 8, minStock: 2 },
      { name: "Chanh", unit: "qu·∫£", stockQuantity: 60, minStock: 10 },
      { name: "Coca Cola", unit: "lon", stockQuantity: 200, minStock: 50 },
      { name: "Pepsi", unit: "lon", stockQuantity: 150, minStock: 30 },
      { name: "N∆∞·ªõc su·ªëi", unit: "chai", stockQuantity: 300, minStock: 50 },
      { name: "Tr√† ƒë√°", unit: "ly", stockQuantity: 100, minStock: 20 },
      { name: "C√† ph√™ ƒëen", unit: "ly", stockQuantity: 80, minStock: 15 },
      { name: "S·ªØa t∆∞∆°i", unit: "h·ªôp", stockQuantity: 50, minStock: 10 },
      { name: "Kem vani", unit: "h·ªôp", stockQuantity: 20, minStock: 5 },
      { name: "B√°nh m√¨", unit: "·ªï", stockQuantity: 100, minStock: 20 },
      { name: "B√°nh ng·ªçt", unit: "c√°i", stockQuantity: 30, minStock: 5 },
    ]);
    console.log("ü•¶ ƒê√£ t·∫°o c√°c Ingredient m·∫´u.");

    // 4Ô∏è‚É£ M√≥n ƒÉn
    const items = await Item.insertMany([
      // M√≥n ch√≠nh hi·ªán t·∫°i
      {
        name: "B√≤ B√≠t T·∫øt",
        description: "Th·ªãt b√≤ √öc n∆∞·ªõng ch·∫£o gang, k√®m khoai t√¢y chi√™n",
        category: "M√≥n ch√≠nh",
        price: 250000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt b√≤")._id,
            quantity: 0.3,
          }, // 300g
          {
            ingredient: ingredients.find((i) => i.name === "Khoai t√¢y")._id,
            quantity: 0.2,
          }, // 200g
        ],
      },
      {
        name: "C√° H·ªìi √Åp Ch·∫£o",
        description: "C√° h·ªìi Na Uy s·ªët chanh d√¢y",
        category: "M√≥n ch√≠nh",
        price: 280000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "C√° h·ªìi")._id,
            quantity: 0.25,
          }, // 250g
          {
            ingredient: ingredients.find((i) => i.name === "B∆°")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "T√¥m Tempura",
        description: "T√¥m chi√™n x√π ki·ªÉu Nh·∫≠t",
        category: "M√≥n ch√≠nh",
        price: 180000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "T√¥m t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "Salad Rau C·ªß",
        description: "Rau c·ªß t∆∞∆°i tr·ªôn d·∫ßu gi·∫•m",
        category: "Khai v·ªã",
        price: 70000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Rau x√† l√°ch")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√† chua")._id,
            quantity: 0.05,
          },
          {
            ingredient: ingredients.find((i) => i.name === "H√†nh t√¢y")._id,
            quantity: 0.03,
          },
        ],
      },
      // Th√™m m√≥n ch√≠nh m·ªõi
      {
        name: "Pizza Margherita",
        description: "Pizza √ù v·ªõi ph√¥ mai mozzarella v√† c√† chua",
        category: "M√≥n ch√≠nh",
        price: 200000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Ph√¥ mai")._id,
            quantity: 0.15,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√† chua")._id,
            quantity: 0.1,
          },
        ],
      },
      {
        name: "Pasta Carbonara",
        description: "M√¨ √ù s·ªët kem v·ªõi th·ªãt x√¥ng kh√≥i",
        category: "M√≥n ch√≠nh",
        price: 180000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Tr·ª©ng g√†")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Ph√¥ mai")._id,
            quantity: 0.1,
          },
        ],
      },
      {
        name: "G√† N∆∞·ªõng M·∫≠t Ong",
        description: "G√† n∆∞·ªõng v·ªõi s·ªët m·∫≠t ong v√† rau c·ªß",
        category: "M√≥n ch√≠nh",
        price: 220000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt g√†")._id,
            quantity: 0.5,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√† r·ªët")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Khoai t√¢y")._id,
            quantity: 0.2,
          },
        ],
      },
      {
        name: "L·∫©u H·∫£i S·∫£n",
        description: "L·∫©u t√¥m, c√°, m·ª±c v·ªõi rau t∆∞∆°i",
        category: "M√≥n ch√≠nh",
        price: 350000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "T√¥m t∆∞∆°i")._id,
            quantity: 0.3,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√° basa")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "M·ª±c t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Rau mu·ªëng")._id,
            quantity: 0.1,
          },
        ],
      },
      {
        name: "B√∫n B√≤ Hu·∫ø",
        description: "B√∫n b√≤ cay v·ªõi th·ªãt b√≤ v√† ch·∫£",
        category: "M√≥n ch√≠nh",
        price: 120000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "B√∫n t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt b√≤")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Rau mu·ªëng")._id,
            quantity: 0.1,
          },
        ],
      },
      {
        name: "Ph·ªü B√≤",
        description: "Ph·ªü truy·ªÅn th·ªëng v·ªõi th·ªãt b√≤ t√°i",
        category: "M√≥n ch√≠nh",
        price: 100000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Ph·ªü t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt b√≤")._id,
            quantity: 0.15,
          },
          {
            ingredient: ingredients.find((i) => i.name === "H√†nh t√¢y")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "C∆°m T·∫•m S√†i G√≤n",
        description: "C∆°m t·∫•m v·ªõi s∆∞·ªùn n∆∞·ªõng v√† ch·∫£",
        category: "M√≥n ch√≠nh",
        price: 80000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "G·∫°o")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt heo")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "D∆∞a chu·ªôt")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "C√° Kho T·ªô",
        description: "C√° basa kho t·ªô v·ªõi n∆∞·ªõc d·ª´a",
        category: "M√≥n ch√≠nh",
        price: 150000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "C√° basa")._id,
            quantity: 0.3,
          },
          {
            ingredient: ingredients.find((i) => i.name === "N∆∞·ªõc m·∫Øm")._id,
            quantity: 0.05,
          },
          {
            ingredient: ingredients.find((i) => i.name === "ƒê∆∞·ªùng")._id,
            quantity: 0.02,
          },
        ],
      },
      // Khai v·ªã
      {
        name: "S√∫p G√† N·∫•m",
        description: "S√∫p g√† v·ªõi n·∫•m h∆∞∆°ng v√† rau c·ªß",
        category: "Khai v·ªã",
        price: 60000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt g√†")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "N·∫•m h∆∞∆°ng")._id,
            quantity: 0.05,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√† r·ªët")._id,
            quantity: 0.1,
          },
        ],
      },
      {
        name: "Salad C√° Ng·ª´",
        description: "Salad c√° ng·ª´ v·ªõi rau xanh",
        category: "Khai v·ªã",
        price: 90000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "C√° h·ªìi")._id,
            quantity: 0.15,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Rau x√† l√°ch")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√† chua")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "G·ªèi Cu·ªën T√¥m Th·ªãt",
        description: "G·ªèi cu·ªën t√¥m th·ªãt v·ªõi rau s·ªëng",
        category: "Khai v·ªã",
        price: 80000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "T√¥m t∆∞∆°i")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt heo")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Rau x√† l√°ch")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "Nem N∆∞·ªõng Nha Trang",
        description: "Nem n∆∞·ªõng ƒë·∫∑c s·∫£n Nha Trang",
        category: "Khai v·ªã",
        price: 120000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Th·ªãt heo")._id,
            quantity: 0.15,
          },
          {
            ingredient: ingredients.find((i) => i.name === "B√°nh m√¨")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "Rau x√† l√°ch")._id,
            quantity: 0.05,
          },
        ],
      },
      // ƒê·ªì u·ªëng
      {
        name: "Coca Cola",
        description: "N∆∞·ªõc ng·ªçt c√≥ ga",
        category: "ƒê·ªì u·ªëng",
        price: 25000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Coca Cola")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "Pepsi",
        description: "N∆∞·ªõc ng·ªçt c√≥ ga",
        category: "ƒê·ªì u·ªëng",
        price: 25000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Pepsi")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "N∆∞·ªõc Su·ªëi",
        description: "N∆∞·ªõc su·ªëi tinh khi·∫øt",
        category: "ƒê·ªì u·ªëng",
        price: 15000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "N∆∞·ªõc su·ªëi")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "Tr√† ƒê√°",
        description: "Tr√† ƒë√° truy·ªÅn th·ªëng",
        category: "ƒê·ªì u·ªëng",
        price: 10000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Tr√† ƒë√°")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "C√† Ph√™ ƒêen",
        description: "C√† ph√™ ƒëen ƒë·∫≠m ƒë√†",
        category: "ƒê·ªì u·ªëng",
        price: 20000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "C√† ph√™ ƒëen")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "Sinh T·ªë D√¢u",
        description: "Sinh t·ªë d√¢u t∆∞∆°i v·ªõi s·ªØa",
        category: "ƒê·ªì u·ªëng",
        price: 35000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "S·ªØa t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "ƒê∆∞·ªùng")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "N∆∞·ªõc Cam √âp",
        description: "N∆∞·ªõc cam t∆∞∆°i √©p",
        category: "ƒê·ªì u·ªëng",
        price: 30000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Chanh")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "Tr√† S·ªØa Tr√¢n Ch√¢u",
        description: "Tr√† s·ªØa v·ªõi tr√¢n ch√¢u ƒëen",
        category: "ƒê·ªì u·ªëng",
        price: 40000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "S·ªØa t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "ƒê∆∞·ªùng")._id,
            quantity: 0.05,
          },
        ],
      },
      // Tr√°ng mi·ªáng
      {
        name: "Kem Vani",
        description: "Kem vani m√°t l·∫°nh",
        category: "Tr√°ng mi·ªáng",
        price: 25000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Kem vani")._id,
            quantity: 1,
          },
        ],
      },
      {
        name: "B√°nh Flan",
        description: "B√°nh flan caramel",
        category: "Tr√°ng mi·ªáng",
        price: 30000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "Tr·ª©ng g√†")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "S·ªØa t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "ƒê∆∞·ªùng")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "Ch√® ƒê·∫≠u ƒê·ªè",
        description: "Ch√® ƒë·∫≠u ƒë·ªè ng·ªçt ng√†o",
        category: "Tr√°ng mi·ªáng",
        price: 20000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "ƒê∆∞·ªùng")._id,
            quantity: 0.05,
          },
          {
            ingredient: ingredients.find((i) => i.name === "S·ªØa t∆∞∆°i")._id,
            quantity: 0.2,
          },
        ],
      },
      {
        name: "B√°nh Tiramisu",
        description: "B√°nh tiramisu √ù",
        category: "Tr√°ng mi·ªáng",
        price: 45000,
        ingredients: [
          {
            ingredient: ingredients.find((i) => i.name === "B√°nh ng·ªçt")._id,
            quantity: 0.1,
          },
          {
            ingredient: ingredients.find((i) => i.name === "S·ªØa t∆∞∆°i")._id,
            quantity: 0.2,
          },
          {
            ingredient: ingredients.find((i) => i.name === "C√† ph√™ ƒëen")._id,
            quantity: 0.05,
          },
        ],
      },
      {
        name: "Tr√°i C√¢y T∆∞∆°i",
        description: "ƒêƒ©a tr√°i c√¢y t∆∞∆°i theo m√πa",
        category: "Tr√°ng mi·ªáng",
        price: 35000,
        ingredients: [],
      },
    ]);
    console.log("üç± ƒê√£ t·∫°o c√°c Item m·∫´u v√† t√≠nh expense t·ª± ƒë·ªông.");

    // 5Ô∏è‚É£ T·∫°o menu m·∫´u
    const menus = await Menu.insertMany([
      {
        name: "Combo B√≤ B√≠t T·∫øt",
        description: "B√≤ b√≠t t·∫øt + Salad + N∆∞·ªõc u·ªëng",
        items: [
          items.find((i) => i.name === "B√≤ B√≠t T·∫øt")._id,
          items.find((i) => i.name === "Salad Rau C·ªß")._id,
        ],
        price: 300000,
        type: "combo",
        isAvailable: true,
      },
      {
        name: "Combo H·∫£i S·∫£n",
        description: "C√° h·ªìi + T√¥m tempura + Salad",
        items: [
          items.find((i) => i.name === "C√° H·ªìi √Åp Ch·∫£o")._id,
          items.find((i) => i.name === "T√¥m Tempura")._id,
          items.find((i) => i.name === "Salad Rau C·ªß")._id,
        ],
        price: 450000,
        type: "combo",
        isAvailable: true,
      },
      {
        name: "Combo Gia ƒê√¨nh",
        description: "T·∫•t c·∫£ m√≥n ch√≠nh + Salad",
        items: items
          .filter((i) => i.category === "M√≥n ch√≠nh")
          .map((item) => item._id),
        price: 600000,
        type: "combo",
        isAvailable: true,
      },
      // Th√™m combo m·ªõi
      {
        name: "Combo Lunch",
        description: "C∆°m t·∫•m + Canh + N∆∞·ªõc u·ªëng",
        items: [
          items.find((i) => i.name === "C∆°m T·∫•m S√†i G√≤n")._id,
          items.find((i) => i.name === "S√∫p G√† N·∫•m")._id,
          items.find((i) => i.name === "Tr√† ƒê√°")._id,
        ],
        price: 120000,
        type: "combo",
        isAvailable: true,
      },
      {
        name: "Combo Dinner",
        description: "Pizza + Pasta + Salad + ƒê·ªì u·ªëng",
        items: [
          items.find((i) => i.name === "Pizza Margherita")._id,
          items.find((i) => i.name === "Pasta Carbonara")._id,
          items.find((i) => i.name === "Salad C√° Ng·ª´")._id,
          items.find((i) => i.name === "Coca Cola")._id,
        ],
        price: 500000,
        type: "combo",
        isAvailable: true,
      },
      {
        name: "Combo Couple",
        description: "L·∫©u h·∫£i s·∫£n + G·ªèi cu·ªën + ƒê·ªì u·ªëng",
        items: [
          items.find((i) => i.name === "L·∫©u H·∫£i S·∫£n")._id,
          items.find((i) => i.name === "G·ªèi Cu·ªën T√¥m Th·ªãt")._id,
          items.find((i) => i.name === "Tr√† S·ªØa Tr√¢n Ch√¢u")._id,
        ],
        price: 550000,
        type: "combo",
        isAvailable: true,
      },
      {
        name: "Combo Party",
        description: "T·∫•t c·∫£ m√≥n + ƒê·ªì u·ªëng + Tr√°ng mi·ªáng",
        items: [
          items.find((i) => i.name === "B√≤ B√≠t T·∫øt")._id,
          items.find((i) => i.name === "L·∫©u H·∫£i S·∫£n")._id,
          items.find((i) => i.name === "Pizza Margherita")._id,
          items.find((i) => i.name === "Coca Cola")._id,
          items.find((i) => i.name === "Kem Vani")._id,
        ],
        price: 800000,
        type: "combo",
        isAvailable: false, // Test unavailable menu
      },
      {
        name: "Combo Vietnamese",
        description: "Ph·ªü + B√∫n + Nem + ƒê·ªì u·ªëng",
        items: [
          items.find((i) => i.name === "Ph·ªü B√≤")._id,
          items.find((i) => i.name === "B√∫n B√≤ Hu·∫ø")._id,
          items.find((i) => i.name === "Nem N∆∞·ªõng Nha Trang")._id,
          items.find((i) => i.name === "N∆∞·ªõc Cam √âp")._id,
        ],
        price: 350000,
        type: "combo",
        isAvailable: true,
      },
      {
        name: "Combo Dessert",
        description: "T·∫•t c·∫£ m√≥n tr√°ng mi·ªáng",
        items: items
          .filter((i) => i.category === "Tr√°ng mi·ªáng")
          .map((item) => item._id),
        price: 200000,
        type: "combo",
        isAvailable: true,
      },
    ]);
    console.log("üçΩÔ∏è ƒê√£ t·∫°o c√°c Menu m·∫´u.");

    // 5Ô∏è‚É£ B√†n ƒÉn (35 b√†n)
    const tables = await Promise.all(
      Array.from({ length: 35 }, (_, i) =>
        Table.create({
          tableNumber: i + 1,
          qrCode: `QR_TABLE_${i + 1}`,
          status: i < 15 ? "occupied" : "available", // 15 b√†n occupied, 20 b√†n available
          orderNow: [], // Kh·ªüi t·∫°o m·∫£ng r·ªóng
        })
      )
    );

    // 6Ô∏è‚É£ T·∫°o orders v·ªõi nhi·ªÅu tr·∫°ng th√°i kh√°c nhau
    const customers = users.filter((u) => u.role === "customer");
    const chefs = users.filter((u) => u.role === "chef");

    // Helper function ƒë·ªÉ t·∫°o orderItem v·ªõi status ph√π h·ª£p
    const createOrderItems = async (items, status, assignedChef = null) => {
      const selectedItems = [];
      for (let j = 0; j < Math.min(3, items.length); j++) {
        const randomItem = items[Math.floor(Math.random() * items.length)];
        const orderItem = await OrderItem.create({
          itemId: randomItem._id,
          itemName: randomItem.name,
          itemType: "item",
          quantity: Math.floor(Math.random() * 2) + 1,
          price: randomItem.price,
          assignedChef: assignedChef,
          status: status,
        });
        selectedItems.push(orderItem);
      }
      return selectedItems;
    };

    // Helper function ƒë·ªÉ t·∫°o confirmation history
    const createConfirmationHistory = (actions) => {
      return actions.map((action) => ({
        action: action,
        timestamp: new Date(),
        details: getActionDetails(action),
      }));
    };

    const getActionDetails = (action) => {
      const details = {
        order_created: "Customer t·∫°o ƒë∆°n h√†ng m·ªõi",
        waiter_approved: "Waiter ƒë√£ x√°c nh·∫≠n ƒë∆°n h√†ng",
        waiter_rejected: "Waiter t·ª´ ch·ªëi ƒë∆°n h√†ng",
        customer_confirmed: "Customer x√°c nh·∫≠n ƒë∆°n h√†ng",
        order_modified: "Customer s·ª≠a ƒë·ªïi ƒë∆°n h√†ng",
      };
      return details[action] || action;
    };

    let orderCount = 0;

    // A. pending orders ƒë√£ ƒë∆∞·ª£c x√≥a ƒë·ªÉ test h·ªá th·ªëng s·∫°ch

    // B. pending orders (waiter approved, customer ch∆∞a confirm) ƒë√£ ƒë∆∞·ª£c x√≥a ƒë·ªÉ test h·ªá th·ªëng s·∫°ch

    // C. rejected orders ƒë√£ ƒë∆∞·ª£c x√≥a ƒë·ªÉ test h·ªá th·ªëng s·∫°ch

    // thi·∫øu confirmed v√† xo√° ready, v√¨ ready b·ªã b·ªè c√≤n confirmed ƒë·ªÉ demo v·ªõi kitchen cho ƒë·∫πp

    // E. preparing - 5 orders
    for (let i = 0; i < 5; i++) {
      const table = tables[i];
      const customer = customers[i % customers.length];
      const waiter = waiters[i % waiters.length];
      const chef = chefs[i % chefs.length];

      const orderItems = await createOrderItems(items, "preparing", chef._id);
      const totalAmount = orderItems.reduce(
        (sum, oi) => sum + oi.price * oi.quantity,
        0
      );

      const payment = await Payment.create({
        paymentMethod: "cash",
        status: "unpaid",
        amountPaid: 0,
        totalAmount: totalAmount,
      });

      const order = await Order.create({
        userId: customer._id,
        servedBy: waiter._id,
        tableId: table._id,
        orderItems: orderItems.map((oi) => oi._id),
        paymentId: payment._id,
        status: "preparing",
        totalAmount: totalAmount,
        discount: 0,
        waiterResponse: {
          status: "approved",
          respondedAt: new Date(),
        },
        customerConfirmed: true,
        confirmationHistory: createConfirmationHistory([
          "order_created",
          "waiter_approved",
          "customer_confirmed",
        ]),
      });

      await OrderItem.updateMany(
        { _id: { $in: orderItems.map((oi) => oi._id) } },
        { orderId: order._id }
      );

      payment.orderId = order._id;
      await payment.save();
      // Sau khi t·∫°o xong order
      if (["confirmed", "preparing", "served"].includes(order.status)) {
        table.status = "occupied";
        if (!table.orderNow || !table.orderNow.includes(order._id)) {
          if (!table.orderNow) table.orderNow = [];
          table.orderNow.push(order._id);
        }
      } else {
        table.status = "available";
        // Kh√¥ng th√™m v√†o orderNow n·∫øu kh√¥ng active
      }
      await table.save();
      orderCount++;
    }

   

    // G. served - 4 orders
    for (let i = 5; i < 9; i++) {
      const table = tables[i];
      const customer = customers[i % customers.length];
      const waiter = waiters[i % waiters.length];
      const chef = chefs[i % chefs.length];

      const orderItems = await createOrderItems(items, "served", chef._id);
      const totalAmount = orderItems.reduce(
        (sum, oi) => sum + oi.price * oi.quantity,
        0
      );

      const payment = await Payment.create({
        paymentMethod: "cash",
        status: "unpaid",
        amountPaid: 0,
        totalAmount: totalAmount,
      });

      const order = await Order.create({
        userId: customer._id,
        servedBy: waiter._id,
        tableId: table._id,
        orderItems: orderItems.map((oi) => oi._id),
        paymentId: payment._id,
        status: "served",
        totalAmount: totalAmount,
        discount: 0,
        servedAt: new Date(),
        waiterResponse: {
          status: "approved",
          respondedAt: new Date(),
        },
        customerConfirmed: true,
        confirmationHistory: createConfirmationHistory([
          "order_created",
          "waiter_approved",
          "customer_confirmed",
        ]),
      });

      await OrderItem.updateMany(
        { _id: { $in: orderItems.map((oi) => oi._id) } },
        { orderId: order._id }
      );

      payment.orderId = order._id;
      await payment.save();
      // Sau khi t·∫°o xong order
      if (["confirmed", "preparing", "served"].includes(order.status)) {
        table.status = "occupied";
        if (!table.orderNow || !table.orderNow.includes(order._id)) {
          if (!table.orderNow) table.orderNow = [];
          table.orderNow.push(order._id);
        }
      } else {
        table.status = "available";
        // Kh√¥ng th√™m v√†o orderNow n·∫øu kh√¥ng active
      }
      await table.save();
      orderCount++;
    }

    // H. paid - 6 orders (completed, created 1-2 weeks ago)
    for (let i = 9; i < 15; i++) {
      const table = tables[i];
      const customer = customers[i % customers.length];
      const waiter = waiters[i % waiters.length];
      const chef = chefs[i % chefs.length];

      const orderItems = await createOrderItems(items, "served", chef._id);
      const totalAmount = orderItems.reduce(
        (sum, oi) => sum + oi.price * oi.quantity,
        0
      );

      const payment = await Payment.create({
        paymentMethod: "card",
        status: "paid",
        amountPaid: totalAmount,
        totalAmount: totalAmount,
      });

      const createdAt = new Date(
        Date.now() - Math.random() * 14 * 24 * 60 * 60 * 1000
      ); // 1-2 tu·∫ßn tr∆∞·ªõc
      const servedAt = new Date(
        createdAt.getTime() + Math.random() * 2 * 60 * 60 * 1000
      ); // 2 gi·ªù sau khi t·∫°o

      const order = await Order.create({
        userId: customer._id,
        servedBy: waiter._id,
        tableId: table._id,
        orderItems: orderItems.map((oi) => oi._id),
        paymentId: payment._id,
        status: "paid",
        totalAmount: totalAmount,
        discount: 0,
        servedAt: servedAt,
        waiterResponse: {
          status: "approved",
          respondedAt: new Date(createdAt.getTime() + 5 * 60 * 1000), // 5 ph√∫t sau
        },
        customerConfirmed: true,
        confirmationHistory: createConfirmationHistory([
          "order_created",
          "waiter_approved",
          "customer_confirmed",
        ]),
        createdAt: createdAt,
      });

      await OrderItem.updateMany(
        { _id: { $in: orderItems.map((oi) => oi._id) } },
        { orderId: order._id }
      );

      payment.orderId = order._id;
      await payment.save();
      // Sau khi t·∫°o xong order
      if (["confirmed", "preparing", "served"].includes(order.status)) {
        table.status = "occupied";
        if (!table.orderNow || !table.orderNow.includes(order._id)) {
          if (!table.orderNow) table.orderNow = [];
          table.orderNow.push(order._id);
        }
      } else {
        table.status = "available";
        // Kh√¥ng th√™m v√†o orderNow n·∫øu kh√¥ng active
      }
      await table.save();
      orderCount++;
    }

    // I. cancelled - 3 orders
    for (let i = 15; i < 18; i++) {
      const table = tables[i];
      const customer = customers[i % customers.length];
      const waiter = waiters[i % waiters.length];

      const orderItems = await createOrderItems(items, "pending");
      const totalAmount = orderItems.reduce(
        (sum, oi) => sum + oi.price * oi.quantity,
        0
      );

      const payment = await Payment.create({
        paymentMethod: "cash",
        status: "unpaid",
        amountPaid: 0,
        totalAmount: totalAmount,
      });

      const order = await Order.create({
        userId: customer._id,
        servedBy: waiter._id,
        tableId: table._id,
        orderItems: orderItems.map((oi) => oi._id),
        paymentId: payment._id,
        status: "cancelled",
        totalAmount: totalAmount,
        discount: 0,
        waiterResponse: {
          status: "pending",
        },
        customerConfirmed: false,
        confirmationHistory: createConfirmationHistory(["order_created"]),
      });

      await OrderItem.updateMany(
        { _id: { $in: orderItems.map((oi) => oi._id) } },
        { orderId: order._id }
      );

      payment.orderId = order._id;
      await payment.save();
      // Sau khi t·∫°o xong order
      if (["confirmed", "preparing", "served"].includes(order.status)) {
        table.status = "occupied";
        if (!table.orderNow || !table.orderNow.includes(order._id)) {
          if (!table.orderNow) table.orderNow = [];
          table.orderNow.push(order._id);
        }
      } else {
        table.status = "available";
        // Kh√¥ng th√™m v√†o orderNow n·∫øu kh√¥ng active
      }
      await table.save();
      orderCount++;
    }

    console.log(`üìã ƒê√£ t·∫°o ${orderCount} orders v·ªõi c√°c tr·∫°ng th√°i kh√°c nhau.`);

    // J. T·∫°o b√†n c√≥ nhi·ªÅu orders ƒëang ho·∫°t ƒë·ªông - 3 b√†n (table 18, 19, 20)
    // M·ªói b√†n s·∫Ω c√≥ 2-3 orders v·ªõi status preparing/served
    for (let tableIdx = 18; tableIdx < 21; tableIdx++) {
      const table = tables[tableIdx];
      const numOrders = tableIdx === 18 ? 2 : 3; // B√†n 18 c√≥ 2 orders, b√†n 19-20 c√≥ 3 orders
      
      for (let orderIdx = 0; orderIdx < numOrders; orderIdx++) {
        const customer = customers[(tableIdx + orderIdx) % customers.length];
        const waiter = waiters[tableIdx % waiters.length];
        const chef = chefs[tableIdx % chefs.length];
        
        // Random status: preparing ho·∫∑c served
        const orderStatus = orderIdx % 2 === 0 ? "preparing" : "served";
        const orderItems = await createOrderItems(items, orderStatus, chef._id);
        const totalAmount = orderItems.reduce((sum, oi) => sum + oi.price * oi.quantity, 0);
        
        const payment = await Payment.create({
          paymentMethod: "cash",
          status: "unpaid",
          amountPaid: 0,
          totalAmount: totalAmount,
        });
        
        const order = await Order.create({
          userId: customer._id,
          servedBy: waiter._id,
          tableId: table._id,
          orderItems: orderItems.map((oi) => oi._id),
          paymentId: payment._id,
          status: orderStatus,
          totalAmount: totalAmount,
          discount: 0,
          servedAt: orderStatus === "served" ? new Date() : null,
          waiterResponse: { status: "approved", respondedAt: new Date() },
          customerConfirmed: true,
          confirmationHistory: createConfirmationHistory([
            "order_created",
            "waiter_approved",
            "customer_confirmed",
          ]),
        });
        
        await OrderItem.updateMany(
          { _id: { $in: orderItems.map((oi) => oi._id) } },
          { orderId: order._id }
        );
        
        payment.orderId = order._id;
        await payment.save();
        
        // Push order v√†o m·∫£ng orderNow c·ªßa b√†n
        if (!table.orderNow || !table.orderNow.includes(order._id)) {
          if (!table.orderNow) table.orderNow = [];
          table.orderNow.push(order._id);
        }
        table.status = "occupied";
        
        orderCount++;
      }
      
      await table.save();
      console.log(`‚úÖ B√†n ${table.tableNumber} c√≥ ${table.orderNow.length} orders ƒëang ho·∫°t ƒë·ªông`);
    }

    // 7Ô∏è‚É£ Purchase Orders
    const purchaseOrders = await PurchaseOrder.insertMany([
      {
        ingredientId: ingredients.find((i) => i.name === "Th·ªãt b√≤")._id,
        quantity: 20,
        unit: "kg",
        price: 2000000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 90),
      },
      {
        ingredientId: ingredients.find((i) => i.name === "C√° h·ªìi")._id,
        quantity: 15,
        unit: "kg",
        price: 1500000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 45),
      },
      {
        ingredientId: ingredients.find((i) => i.name === "Rau x√† l√°ch")._id,
        quantity: 50,
        unit: "b√≥",
        price: 500000,
        expiryDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10),
      },
      // Th√™m purchase orders m·ªõi
      {
        ingredientId: ingredients.find((i) => i.name === "Th·ªãt heo")._id,
        quantity: 25,
        unit: "kg",
        price: 1800000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 60), // +60 ng√†y
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "C√° basa")._id,
        quantity: 30,
        unit: "kg",
        price: 1200000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30), // +30 ng√†y
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "T√¥m t∆∞∆°i")._id,
        quantity: 20,
        unit: "kg",
        price: 2000000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 5), // +5 ng√†y (g·∫ßn h·∫øt h·∫°n)
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "M·ª±c t∆∞∆°i")._id,
        quantity: 15,
        unit: "kg",
        price: 1500000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3), // +3 ng√†y (g·∫ßn h·∫øt h·∫°n)
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "Ph√¥ mai")._id,
        quantity: 10,
        unit: "kg",
        price: 800000,
        expiryDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5), // h·∫øt h·∫°n 5 ng√†y tr∆∞·ªõc
        status: "expired",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
        quantity: 50,
        unit: "kg",
        price: 600000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 120), // +120 ng√†y
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "G·∫°o")._id,
        quantity: 100,
        unit: "kg",
        price: 1000000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 180), // +180 ng√†y
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "Coca Cola")._id,
        quantity: 200,
        unit: "lon",
        price: 500000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365), // +365 ng√†y
        status: "valid",
      },
      {
        ingredientId: ingredients.find((i) => i.name === "S·ªØa t∆∞∆°i")._id,
        quantity: 30,
        unit: "h·ªôp",
        price: 400000,
        expiryDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7), // +7 ng√†y
        status: "valid",
      },
    ]);
    console.log("üì¶ ƒê√£ t·∫°o c√°c PurchaseOrder m·∫´u.");

    // 8Ô∏è‚É£ Feedbacks
    await Feedback.insertMany([
      {
        userId: customers[0]._id,
        rating: 5,
        comment: "ƒê·ªì ƒÉn r·∫•t ngon, ph·ª•c v·ª• nhanh!",
      },
      {
        userId: customers[1]._id,
        rating: 4,
        comment: "Kh√¥ng gian ƒë·∫πp, h∆°i ·ªìn m·ªôt ch√∫t.",
      },
      // Th√™m feedbacks m·ªõi
      {
        userId: customers[2]._id,
        rating: 5,
        comment: "M√≥n b√≤ b√≠t t·∫øt tuy·ªát v·ªùi, s·∫Ω quay l·∫°i!",
      },
      {
        userId: customers[3]._id,
        rating: 3,
        comment: "ƒê·ªì ƒÉn ·ªïn nh∆∞ng gi√° h∆°i cao.",
      },
      {
        userId: customers[4]._id,
        rating: 4,
        comment: "Nh√¢n vi√™n th√¢n thi·ªán, kh√¥ng gian s·∫°ch s·∫Ω.",
      },
      {
        userId: customers[5]._id,
        rating: 5,
        comment: "Combo gia ƒë√¨nh r·∫•t ƒë√°ng gi√°!",
      },
      {
        userId: customers[6]._id,
        rating: 2,
        comment: "Ch·ªù ƒë·ª£i qu√° l√¢u, ƒë·ªì ƒÉn kh√¥ng n√≥ng.",
      },
      {
        userId: customers[7]._id,
        rating: 4,
        comment: "Pizza ngon, gi√° h·ª£p l√Ω.",
      },
      {
        userId: customers[8]._id,
        rating: 5,
        comment: "L·∫©u h·∫£i s·∫£n t∆∞∆°i ngon, gia ƒë√¨nh r·∫•t th√≠ch.",
      },
      {
        userId: customers[9]._id,
        rating: 3,
        comment: "ƒê·ªì u·ªëng ngon nh∆∞ng h∆°i √≠t.",
      },
      {
        userId: customers[0]._id,
        rating: 4,
        comment: "Ph·ªü b√≤ ƒë·∫≠m ƒë√†, n∆∞·ªõc d√πng ngon.",
      },
      {
        userId: customers[1]._id,
        rating: 5,
        comment: "B√∫n b√≤ Hu·∫ø cay v·ª´a ph·∫£i, r·∫•t ngon!",
      },
      {
        userId: customers[2]._id,
        rating: 4,
        comment: "Salad t∆∞∆°i ngon, rau c·ªß ƒëa d·∫°ng.",
      },
      {
        userId: customers[3]._id,
        rating: 3,
        comment: "Kh√¥ng gian ƒë·∫πp nh∆∞ng h∆°i ch·∫≠t.",
      },
      {
        userId: customers[4]._id,
        rating: 5,
        comment: "ƒê·∫ßu b·∫øp n·∫•u r·∫•t ngon, s·∫Ω gi·ªõi thi·ªáu b·∫°n b√®.",
      },
      {
        userId: customers[5]._id,
        rating: 4,
        comment: "G√† n∆∞·ªõng m·∫≠t ong th∆°m ngon.",
      },
      {
        userId: customers[6]._id,
        rating: 2,
        comment: "Ph·ª•c v·ª• ch·∫≠m, ƒë·ªì ƒÉn kh√¥ng ƒë√∫ng y√™u c·∫ßu.",
      },
      {
        userId: customers[7]._id,
        rating: 4,
        comment: "Tr√°ng mi·ªáng ngon, kem vani m√°t l·∫°nh.",
      },
      {
        userId: customers[8]._id,
        rating: 5,
        comment: "C√° h·ªìi √°p ch·∫£o tuy·ªát v·ªùi, s·∫Ω quay l·∫°i.",
      },
      {
        userId: customers[9]._id,
        rating: 3,
        comment: "Gi√° c·∫£ h·ª£p l√Ω nh∆∞ng kh·∫©u ph·∫ßn h∆°i nh·ªè.",
      },
    ]);
    console.log("üí¨ ƒê√£ t·∫°o c√°c Feedback m·∫´u.");

    console.log("‚úÖ SEED DATABASE TH√ÄNH C√îNG!");
  } catch (error) {
    console.error("‚ùå L·ªói khi seed database:", error);
  }

  // üßπ Cleanup: ƒë·ªìng b·ªô l·∫°i logic table - order
  const tables = await Table.find().populate("orderNow");
  for (const table of tables) {
    // ƒê·∫£m b·∫£o orderNow l√† m·∫£ng
    if (!table.orderNow) {
      table.orderNow = [];
    }
    
    // Filter ra c√°c orders active (populated orders)
    const activeOrders = table.orderNow.filter(order => 
      order && order.status && ["confirmed", "preparing", "served"].includes(order.status)
    );
    
    // Chuy·ªÉn v·ªÅ array of ObjectIds
    table.orderNow = activeOrders.map(o => o._id);
    
    if (activeOrders.length > 0) {
      table.status = "occupied";
    } else {
      table.status = "available";
    }
    
    await table.save();
  }
  console.log("‚úÖ ƒê√£ ƒë·ªìng b·ªô b√†n v√† ƒë∆°n h√†ng ƒë√∫ng logic m·ªõi!");

};

module.exports = seedDatabase;
