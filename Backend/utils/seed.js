const mongoose = require("mongoose");
const User = require("../models/User");
const Ingredient = require("../models/Ingredient");
const Item = require("../models/Item");
const Menu = require("../models/Menu");
const Table = require("../models/Table");
const Order = require("../models/Order");
const OrderItem = require("../models/OrderItem");
const Payment = require("../models/Payment");
const Feedback = require("../models/Feedback");
const PurchaseOrder = require("../models/PurchaseOrder");

const seedDatabase = async () => {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu seeding database...");

    // =====================================================
    // 1Ô∏è‚É£ XO√Å TO√ÄN B·ªò D·ªÆ LI·ªÜU C≈®
    // =====================================================
    await Promise.all([
      User.deleteMany(),
      Ingredient.deleteMany(),
      Item.deleteMany(),
      Menu.deleteMany(),
      Table.deleteMany(),
      Order.deleteMany(),
      OrderItem.deleteMany(),
      Payment.deleteMany(),
      Feedback.deleteMany(),
      PurchaseOrder.deleteMany(),
    ]);
    console.log("üßπ To√†n b·ªô d·ªØ li·ªáu c≈© ƒë√£ ƒë∆∞·ª£c xo√° s·∫°ch!");

    // =====================================================
    // 2Ô∏è‚É£ T·∫†O NG∆Ø·ªúI D√ôNG M·∫™U
    // =====================================================
    const [customer, waiter, chef] = await Promise.all([
      User.create({
        name: "Nguy·ªÖn VƒÉn Kh√°ch",
        username: "customer01",
        password: "password123",
        email: "customer@example.com",
        phone: "0123456789",
        role: "customer",
        point: 100,
      }),
      User.create({
        name: "Tr·∫ßn Th·ªã Ph·ª•c V·ª•",
        username: "waiter01",
        password: "password123",
        email: "waiter@example.com",
        phone: "0987654321",
        role: "waiter",
      }),
      User.create({
        name: "ƒê·∫ßu B·∫øp Tr∆∞·ªüng",
        username: "chef01",
        password: "password123",
        email: "chef@example.com",
        phone: "0908888999",
        role: "chef",
      }),
    ]);
    console.log("üë§ Users created.");

    // =====================================================
    // 3Ô∏è‚É£ T·∫†O NGUY√äN LI·ªÜU (INGREDIENTS)
    // =====================================================
    const ingredients = await Ingredient.insertMany([
      { name: "Th·ªãt b√≤", unit: "kg", stockQuantity: 50, minStock: 10 },
      { name: "C√° h·ªìi", unit: "kg", stockQuantity: 30, minStock: 5 },
      { name: "Khoai t√¢y", unit: "kg", stockQuantity: 40, minStock: 8 },
      { name: "Rau x√† l√°ch", unit: "b√≥", stockQuantity: 60, minStock: 10 },
      { name: "Tr·ª©ng g√†", unit: "qu·∫£", stockQuantity: 100, minStock: 20 },
      { name: "B·ªôt m√¨", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "T√¥m t∆∞∆°i", unit: "kg", stockQuantity: 45, minStock: 10 },
      { name: "Ph√¥ mai", unit: "kg", stockQuantity: 20, minStock: 5 },
      { name: "Th·ªãt x√¥ng kh√≥i", unit: "kg", stockQuantity: 25, minStock: 5 },
      { name: "S·ªët c√† chua", unit: "chai", stockQuantity: 15, minStock: 3 },
    ]);
    console.log("ü•¨ Ingredients created.");

    // =====================================================
    // 4Ô∏è‚É£ T·∫†O M√ìN ƒÇN (ITEMS)
    // =====================================================
    const items = await Item.insertMany([
      {
        name: "B√≤ B√≠t T·∫øt",
        description: "Th·ªãt b√≤ √öc n∆∞·ªõng ch·∫£o gang, k√®m khoai t√¢y chi√™n",
        category: "M√≥n ch√≠nh",
        price: 250000,
        ingredients: [
          ingredients.find((i) => i.name === "Th·ªãt b√≤")._id,
          ingredients.find((i) => i.name === "Khoai t√¢y")._id,
        ],
        image: "bo-bit-tet.jpg",
      },
      {
        name: "C√° H·ªìi √Åp Ch·∫£o",
        description: "C√° h·ªìi Na Uy s·ªët chanh d√¢y",
        category: "M√≥n ch√≠nh",
        price: 280000,
        ingredients: [ingredients.find((i) => i.name === "C√° h·ªìi")._id],
        image: "ca-hoi-ap-chao.jpg",
      },
      {
        name: "T√¥m Tempura",
        description: "T√¥m chi√™n x√π ki·ªÉu Nh·∫≠t, ƒÉn k√®m n∆∞·ªõc ch·∫•m g·ª´ng",
        category: "M√≥n ch√≠nh",
        price: 180000,
        ingredients: [
          ingredients.find((i) => i.name === "T√¥m t∆∞∆°i")._id,
          ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
        ],
        image: "tom-tempura.jpg",
      },
      {
        name: "Salad Rau C·ªß",
        description: "Rau c·ªß t∆∞∆°i tr·ªôn d·∫ßu gi·∫•m",
        category: "Khai v·ªã",
        price: 70000,
        ingredients: [ingredients.find((i) => i.name === "Rau x√† l√°ch")._id],
        image: "salad-rau-cu.jpg",
      },
      {
        name: "M√¨ √ù Carbonara",
        description: "M√¨ √ù kem tr·ª©ng v√† th·ªãt x√¥ng kh√≥i",
        category: "M√≥n ch√≠nh",
        price: 220000,
        ingredients: [
          ingredients.find((i) => i.name === "Tr·ª©ng g√†")._id,
          ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
          ingredients.find((i) => i.name === "Th·ªãt x√¥ng kh√≥i")._id,
        ],
        image: "mi-y-carbonara.jpg",
      },
      {
        name: "Pizza Ph√¥ Mai",
        description: "Pizza ph√¥ mai k√©o s·ª£i v·ªõi s·ªët c√† chua nh√† l√†m",
        category: "M√≥n ch√≠nh",
        price: 200000,
        ingredients: [
          ingredients.find((i) => i.name === "Ph√¥ mai")._id,
          ingredients.find((i) => i.name === "B·ªôt m√¨")._id,
          ingredients.find((i) => i.name === "S·ªët c√† chua")._id,
        ],
        image: "pizza-pho-mai.jpg",
      },
    ]);
    console.log("üçΩÔ∏è Items created.");

    // =====================================================
    // 5Ô∏è‚É£ T·∫†O MENU
    // =====================================================
    const menus = await Menu.insertMany([
      {
        name: "Menu Tr∆∞a G·ªçn Nh·∫π",
        description: "Ph√π h·ª£p cho b·ªØa tr∆∞a nhanh g·ªçn",
        items: [
          items.find((i) => i.name === "Salad Rau C·ªß")._id,
          items.find((i) => i.name === "B√≤ B√≠t T·∫øt")._id,
        ],
        price: 300000,
      },
      {
        name: "Menu T·ªëi Sang Tr·ªçng",
        description: "Th·ª±c ƒë∆°n ƒë·∫∑c bi·ªát cho bu·ªïi t·ªëi",
        items: [
          items.find((i) => i.name === "C√° H·ªìi √Åp Ch·∫£o")._id,
          items.find((i) => i.name === "T√¥m Tempura")._id,
          items.find((i) => i.name === "M√¨ √ù Carbonara")._id,
        ],
        price: 450000,
      },
    ]);
    console.log("üìú Menus created.");

    // =====================================================
    // 6Ô∏è‚É£ T·∫†O 10 B√ÄN
    // =====================================================
    const tables = await Promise.all(
      Array.from({ length: 10 }, (_, i) =>
        Table.create({
          tableNumber: i + 1,
          qrCode: `QR_TABLE_${i + 1}`,
          status: i < 5 ? "occupied" : "available",
        })
      )
    );
    console.log("üçΩÔ∏è Tables created.");

    // =====================================================
    // 7Ô∏è‚É£ T·∫†O ORDER + ORDER ITEMS + PAYMENT
    // =====================================================
    const orderStatuses = [
      "pending",
      "waiting_confirm",
      "confirmed",
      "preparing",
      "ready",
      "served",
    ];
    const itemStatuses = ["pending", "preparing", "ready", "served"];

    for (let i = 0; i < 10; i++) {
      const table = tables[i];
      const numItems = Math.floor(Math.random() * 2) + 3; // 3‚Äì4 m√≥n
      const selectedOrderItems = [];

      for (let j = 0; j < numItems; j++) {
        const randomItem = items[Math.floor(Math.random() * items.length)];
        const orderItem = await OrderItem.create({
          itemId: randomItem._id,
          itemName: randomItem.name,
          itemType: "item",
          quantity: Math.floor(Math.random() * 2) + 1,
          price: randomItem.price,
          assignedChef: chef._id,
          status:
            itemStatuses[Math.floor(Math.random() * itemStatuses.length)],
          note: j === 0 ? "Kh√¥ng cay" : "",
        });
        selectedOrderItems.push(orderItem);
      }

      const payment = await Payment.create({
        paymentMethod: "card",
        status: "unpaid",
        amountPaid: 0,
      });

      const order = await Order.create({
        userId: customer._id,
        servedBy: i < 5 ? waiter._id : null, // Waiter ph·ª•c v·ª• 5 b√†n ƒë·∫ßu
        tableId: table._id,
        orderItems: selectedOrderItems.map((oi) => oi._id),
        paymentId: payment._id,
        status: orderStatuses[Math.floor(Math.random() * orderStatuses.length)],
        totalAmount: selectedOrderItems.reduce(
          (sum, oi) => sum + oi.price * oi.quantity,
          0
        ),
        discount: 0,
      });

      // G√°n reference ng∆∞·ª£c
      await Promise.all([
        ...selectedOrderItems.map(async (oi) => {
          oi.orderId = order._id;
          await oi.save();
        }),
        Payment.updateOne({ _id: payment._id }, { orderId: order._id }),
        Table.updateOne(
          { _id: table._id },
          { $push: { orders: order._id }, status: "occupied" }
        ),
      ]);
    }
    console.log("üßæ Orders & Payments created.");

    // =====================================================
    // 8Ô∏è‚É£ FEEDBACK M·∫™U
    // =====================================================
    const oneOrder = await Order.findOne();
    await Feedback.create({
      orderId: oneOrder._id,
      userId: customer._id,
      rating: 5,
      comment: "M√≥n ƒÉn ngon, ph·ª•c v·ª• nhanh!",
    });
    console.log("üí¨ Feedback created.");

    // =====================================================
    // 9Ô∏è‚É£ PURCHASE ORDER (nh·∫≠p nguy√™n li·ªáu)
    // =====================================================
    const beef = ingredients.find((i) => i.name === "Th·ªãt b√≤");
    await PurchaseOrder.create({
      ingredientId: beef._id,
      quantity: 20,
      unit: "kg",
      price: 2500000,
    });
    console.log("üì¶ Purchase order created.");

    console.log("‚úÖ SEED DATABASE TH√ÄNH C√îNG!");
  } catch (error) {
    console.error("‚ùå L·ªói khi seed database:", error);
  }
};

module.exports = seedDatabase;
