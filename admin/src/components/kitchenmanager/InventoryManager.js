import React, { useState } from "react";
import kitchenApi from "../../api/kitchenApi";

export default function InventoryManager({ ingredients, onRefresh }) {
  const [selectedIng, setSelectedIng] = useState(null);
  const [addAmount, setAddAmount] = useState("");
  const [showAddModal, setShowAddModal] = useState(false);
  const [newIng, setNewIng] = useState({
    name: "",
    unit: "",
    stockQuantity: 0,
    minStock: 0,
  });

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  // ‚úÖ H√†m th√™m nguy√™n li·ªáu m·ªõi
  const handleAddIngredient = async () => {
    if (!newIng.name || !newIng.unit) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n v√† ƒë∆°n v·ªã!");
      return;
    }

    setLoading(true);
    try {
      await kitchenApi.createIngredient(newIng);
      setMessage(`‚úÖ ƒê√£ th√™m nguy√™n li·ªáu: ${newIng.name}`);
      setShowAddModal(false);
      setNewIng({ name: "", unit: "", stockQuantity: 0, minStock: 0 });
      if (onRefresh) await onRefresh();
    } catch (err) {
      console.error(err);
      setMessage("‚ùå L·ªói khi th√™m nguy√™n li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ H√†m c·∫≠p nh·∫≠t t·ªìn kho
  const handleUpdateStock = async () => {
    if (!selectedIng || !addAmount) return;
    const amount = Number(addAmount);
    if (isNaN(amount) || amount <= 0) {
      alert("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!");
      return;
    }

    setLoading(true);
    try {
      await kitchenApi.createPurchaseOrder({
        ingredientId: selectedIng._id,
        quantity: amount,
        unit: selectedIng.unit,
        supplier: "Nh·∫≠p tr·ª±c ti·∫øp",
        note: `Nh·∫≠p th√™m ${amount} ${selectedIng.unit} cho ${selectedIng.name}`,
      });

      setMessage(
        `‚úÖ ƒê√£ nh·∫≠p th√™m ${amount} ${selectedIng.unit} cho ${selectedIng.name}`
      );

      if (onRefresh) await onRefresh();

      setSelectedIng(null);
      setAddAmount("");
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t kho:", err);
      setMessage("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-md">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-gray-800">
          üì¶ Qu·∫£n l√Ω kho nguy√™n li·ªáu
        </h2>
        <button
          onClick={() => setShowAddModal(true)}
          className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg text-sm font-medium"
        >
          ‚ûï Th√™m nguy√™n li·ªáu
        </button>
      </div>

      {message && (
        <div className="mb-4 text-center font-medium text-green-700 bg-green-50 border border-green-300 p-2 rounded-lg">
          {message}
        </div>
      )}

      {ingredients.length === 0 ? (
        <p className="text-gray-500 italic text-center py-4">
          Kh√¥ng c√≥ nguy√™n li·ªáu n√†o trong kho.
        </p>
      ) : (
        <table className="w-full border-collapse text-sm text-gray-700">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-4 py-2 text-left">T√™n nguy√™n li·ªáu</th>
              <th className="px-4 py-2 text-left">ƒê∆°n v·ªã</th>
              <th className="px-4 py-2 text-left">T·ªìn kho</th>
              <th className="px-4 py-2 text-left">T·ªëi thi·ªÉu</th>
              <th className="px-4 py-2 text-left">Tr·∫°ng th√°i</th>
              <th className="px-4 py-2 text-center">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {ingredients.map((ing) => (
              <tr key={ing._id} className="border-t hover:bg-gray-50">
                <td className="px-4 py-2 font-medium">{ing.name}</td>
                <td className="px-4 py-2">{ing.unit}</td>
                <td className="px-4 py-2">{ing.stockQuantity}</td>
                <td className="px-4 py-2">{ing.minStock}</td>
                <td
                  className={`px-4 py-2 font-semibold ${
                    ing.stockQuantity <= ing.minStock
                      ? "text-red-600"
                      : "text-green-600"
                  }`}
                >
                  {ing.stockQuantity <= ing.minStock
                    ? "‚ö†Ô∏è C·∫ßn nh·∫≠p th√™m"
                    : "‚úÖ ƒê·ªß h√†ng"}
                </td>
                <td className="px-4 py-2 text-center">
                  <button
                    onClick={() => setSelectedIng(ing)}
                    className="px-3 py-1 text-sm rounded bg-blue-500 hover:bg-blue-600 text-white"
                  >
                    + Nh·∫≠p th√™m
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {/* ‚úÖ MODAL: Nh·∫≠p th√™m */}
      {selectedIng && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-lg w-96">
            <h3 className="text-lg font-semibold mb-2">
              Nh·∫≠p th√™m: {selectedIng.name}
            </h3>
            <p className="text-sm text-gray-500 mb-4">
              Hi·ªán t·∫°i: {selectedIng.stockQuantity} {selectedIng.unit}
            </p>

            <input
              type="number"
              min="1"
              value={addAmount}
              onChange={(e) => setAddAmount(e.target.value)}
              className="w-full border rounded px-3 py-2 mb-3"
              placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng th√™m..."
            />

            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setSelectedIng(null)}
                className="px-4 py-2 rounded bg-gray-300 hover:bg-gray-400 text-gray-800"
              >
                H·ªßy
              </button>
              <button
                onClick={handleUpdateStock}
                disabled={loading}
                className={`px-4 py-2 rounded text-white ${
                  loading
                    ? "bg-green-300 cursor-not-allowed"
                    : "bg-green-500 hover:bg-green-600"
                }`}
              >
                {loading ? "ƒêang l∆∞u..." : "X√°c nh·∫≠n"}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ MODAL: Th√™m nguy√™n li·ªáu */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-8 rounded-2xl shadow-2xl w-[550px] max-h-[90vh] overflow-y-auto">
            <h3 className="text-2xl font-bold mb-6 text-gray-800 text-center">
              ‚ûï Th√™m nguy√™n li·ªáu m·ªõi
            </h3>

            {/* T√™n nguy√™n li·ªáu */}
            <div className="mb-5">
              <label className="block text-gray-700 font-semibold mb-1">
                T√™n nguy√™n li·ªáu <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                placeholder="VD: Th·ªãt b√≤, G·∫°o ST25, D·∫ßu ƒÉn..."
                className="w-full border rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-400 outline-none"
                value={newIng.name}
                onChange={(e) => setNewIng({ ...newIng, name: e.target.value })}
              />
              <p className="text-xs text-gray-500 mt-1">
                Nh·∫≠p t√™n r√µ r√†ng ƒë·ªÉ d·ªÖ t√¨m ki·∫øm trong danh s√°ch kho.
              </p>
            </div>

            {/* ƒê∆°n v·ªã t√≠nh */}
            <div className="mb-5">
              <label className="block text-gray-700 font-semibold mb-1">
                ƒê∆°n v·ªã t√≠nh <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                placeholder="VD: kg, b√≥, chai, g√≥i..."
                className="w-full border rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-400 outline-none"
                value={newIng.unit}
                onChange={(e) => setNewIng({ ...newIng, unit: e.target.value })}
              />
              <p className="text-xs text-gray-500 mt-1">
                ƒê∆°n v·ªã gi√∫p t√≠nh to√°n v√† nh·∫≠p h√†ng ch√≠nh x√°c.
              </p>
            </div>

            {/* S·ªë l∆∞·ª£ng ban ƒë·∫ßu */}
            <div className="mb-5">
              <label className="block text-gray-700 font-semibold mb-1">
                S·ªë l∆∞·ª£ng ban ƒë·∫ßu
              </label>
              <input
                type="number"
                min="0"
                placeholder="VD: 10"
                className="w-full border rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-400 outline-none"
                value={newIng.stockQuantity}
                onChange={(e) =>
                  setNewIng({
                    ...newIng,
                    stockQuantity: Number(e.target.value),
                  })
                }
              />
              <p className="text-xs text-gray-500 mt-1">
                S·ªë l∆∞·ª£ng hi·ªán c√≥ khi nh·∫≠p kho l·∫ßn ƒë·∫ßu. C√≥ th·ªÉ ƒë·ªÉ 0.
              </p>
            </div>

            {/* M·ª©c t·ªìn t·ªëi thi·ªÉu */}
            <div className="mb-6">
              <label className="block text-gray-700 font-semibold mb-1">
                M·ª©c t·ªìn t·ªëi thi·ªÉu
              </label>
              <input
                type="number"
                min="0"
                placeholder="VD: 5"
                className="w-full border rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-400 outline-none"
                value={newIng.minStock}
                onChange={(e) =>
                  setNewIng({ ...newIng, minStock: Number(e.target.value) })
                }
              />
              <p className="text-xs text-gray-500 mt-1">
                Khi t·ªìn kho nh·ªè h∆°n m·ª©c n√†y, h·ªá th·ªëng s·∫Ω c·∫£nh b√°o ‚ÄúC·∫ßn nh·∫≠p
                th√™m‚Äù.
              </p>
            </div>

            {/* N√∫t h√†nh ƒë·ªông */}
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowAddModal(false)}
                className="px-5 py-2 rounded-lg bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium"
              >
                H·ªßy
              </button>
              <button
                onClick={handleAddIngredient}
                disabled={loading}
                className={`px-5 py-2 rounded-lg text-white font-medium ${
                  loading
                    ? "bg-green-300 cursor-not-allowed"
                    : "bg-green-600 hover:bg-green-700"
                }`}
              >
                {loading ? "ƒêang l∆∞u..." : "Th√™m nguy√™n li·ªáu"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
