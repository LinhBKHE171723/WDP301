import React, { useState } from "react";
import {
    Container,
    Card,
    Button,
    Image,
    Modal,
    Form,
    Spinner,
} from "react-bootstrap";
import { useAuth } from "../../context/AuthContext";
import Header from "../waiter/Header";
import userApi from "../../api/userApi";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Profile() {
    const { user, setUser } = useAuth();
    const [showModal, setShowModal] = useState(false);
    const [saving, setSaving] = useState(false);

    // D·ªØ li·ªáu form ban ƒë·∫ßu t·ª´ user
    const [form, setForm] = useState({
        name: user?.name || "",
        phone: user?.phone || "",
    });

    const [preview, setPreview] = useState(
        user?.avatar || "https://cdn-icons-png.flaticon.com/512/149/149071.png"
    );
    const [file, setFile] = useState(null);

    // üß© Khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh m·ªõi
    const handleFileChange = (e) => {
        const f = e.target.files?.[0];
        if (!f) return;
        setFile(f);
        const url = URL.createObjectURL(f);
        setPreview(url);
    };

    // üíæ L∆∞u th√¥ng tin h·ªì s∆° (g·ª≠i t·ªõi backend)
    const handleSave = async () => {
        setSaving(true);
        try {
            // T·∫°o FormData ƒë·ªÉ g·ª≠i file v√† c√°c tr∆∞·ªùng kh√°c
            const formData = new FormData();
            formData.append("name", form.name);
            formData.append("phone", form.phone);
            if (file) formData.append("avatar", file); // ch·ªâ th√™m khi c√≥ file

            // G·ªçi API backend c·∫≠p nh·∫≠t
            const res = await userApi.updateProfile(formData, true); // th√™m flag true ƒë·ªÉ g·ª≠i multipart

            toast.success("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
            setUser?.(res.user); // C·∫≠p nh·∫≠t context
            // ‚úÖ C·∫≠p nh·∫≠t localStorage ƒë·ªÉ khi reload v·∫´n th·∫•y ƒë√∫ng
            localStorage.setItem("user", JSON.stringify(res.user));
            if (res.token) localStorage.setItem("token", res.token);
            setShowModal(false);
        } catch (err) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:", err);
            toast.error("Kh√¥ng th·ªÉ l∆∞u h·ªì s∆°, vui l√≤ng th·ª≠ l·∫°i!");
        } finally {
            setSaving(false);
        }
    };

    return (
        <Container className="py-4">
            {/* üß≠ Header */}
            <Header />

            <h3 className="my-4">H·ªì s∆° c√° nh√¢n</h3>

            {/* ü™™ Hi·ªÉn th·ªã th√¥ng tin hi·ªán t·∫°i */}
            <Card className="p-3 d-flex flex-row align-items-center gap-3 shadow-sm">
                <Image
                    src={preview}
                    roundedCircle
                    width={100}
                    height={100}
                    alt="avatar"
                />
                <div>
                    <h5>{user?.name}</h5>
                    <p className="mb-1">
                        <span className="fw-bold">Email:</span> {user?.email}
                    </p>
                    <p className="mb-1">
                        <span className="fw-bold">Phone number:</span>{" "}
                        {user?.phone || "Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i"}
                    </p>
                    <Button variant="outline-primary" onClick={() => setShowModal(true)}>
                        Ch·ªânh s·ª≠a
                    </Button>
                </div>
            </Card>

            {/* ‚úèÔ∏è Modal ch·ªânh s·ª≠a */}
            <Modal show={showModal} onHide={() => setShowModal(false)} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Ch·ªânh s·ª≠a th√¥ng tin</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form>
                        {/* ·∫¢nh ƒë·∫°i di·ªán */}
                        <div className="d-flex align-items-center mb-3 gap-3">
                            <div style={{ width: 96, height: 96 }}>
                                <Image src={preview} roundedCircle width={96} height={96} />
                            </div>
                            <Form.Group controlId="formFile" className="mb-0">
                                <Form.Label>·∫¢nh ƒë·∫°i di·ªán</Form.Label>
                                <Form.Control
                                    type="file"
                                    accept="image/*"
                                    onChange={handleFileChange}
                                />
                            </Form.Group>
                        </div>

                        {/* H·ªç t√™n */}
                        <Form.Group className="mb-3">
                            <Form.Label>H·ªç v√† t√™n</Form.Label>
                            <Form.Control
                                value={form.name}
                                onChange={(e) =>
                                    setForm({ ...form, name: e.target.value })
                                }
                            />
                        </Form.Group>

                        {/* S·ªë ƒëi·ªán tho·∫°i */}
                        <Form.Group className="mb-3">
                            <Form.Label>S·ªë ƒëi·ªán tho·∫°i</Form.Label>
                            <Form.Control
                                value={form.phone}
                                onChange={(e) =>
                                    setForm({ ...form, phone: e.target.value })
                                }
                            />
                        </Form.Group>
                    </Form>
                </Modal.Body>

                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowModal(false)}>
                        H·ªßy
                    </Button>
                    <Button variant="primary" onClick={handleSave} disabled={saving}>
                        {saving ? <Spinner animation="border" size="sm" /> : "L∆∞u"}
                    </Button>
                </Modal.Footer>
            </Modal>
            <ToastContainer position="top-right" autoClose={2000} />
        </Container>
    );
}
