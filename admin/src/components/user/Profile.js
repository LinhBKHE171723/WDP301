import React, { useState } from "react";
import {
    Container,
    Card,
    Button,
    Image,
    Modal,
    Form,
    Spinner,
} from "react-bootstrap";
import { useAuth } from "../../context/AuthContext";
import Header from "../waiter/Header";
import userApi from "../../api/userApi"; // ‚úÖ g·ªçi API backend
import axios from "axios";
import { toast } from "react-toastify";

export default function Profile() {
    const {user, logout, setUser } = useAuth(); // setUser ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i context
    const [showModal, setShowModal] = useState(false);
    const [saving, setSaving] = useState(false);
    const [form, setForm] = useState({
        name: user?.name || "",
        phone: user?.phone || "",
        avatar: user?.avatar || "",
    });
    const [file, setFile] = useState(null); // file ·∫£nh m·ªõi
    const [preview, setPreview] = useState(user?.avatar || "https://cdn-icons-png.flaticon.com/512/149/149071.png"); // ·∫£nh preview

    // üì∏ Khi ch·ªçn file m·ªõi
    const handleFileChange = (e) => {
        const f = e.target.files?.[0];
        if (!f) return;
        setFile(f);
        const url = URL.createObjectURL(f);
        setPreview(url);
    };

    // ‚òÅÔ∏è Upload ·∫£nh l√™n Cloudinary
    const uploadToCloudinary = async (file) => {
        // L·∫•y ch·ªØ k√Ω upload (signature) t·ª´ backend
        const sigRes = await axios.get("/api/cloudinary/upload/signature");
        const { signature, timestamp } = sigRes.data;

        const formData = new FormData();
        formData.append("file", file);
        formData.append("api_key", process.env.REACT_APP_CLOUDINARY_API_KEY);
        formData.append("timestamp", timestamp);
        formData.append("signature", signature);
        formData.append("folder", "restaurant_profiles");

        const cloudName = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME;
        const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;

        const uploadRes = await axios.post(url, formData, {
            headers: { "Content-Type": "multipart/form-data" },
        });

        return uploadRes.data.secure_url; // tr·∫£ v·ªÅ link ·∫£nh
    };

    // üíæ L∆∞u th√¥ng tin h·ªì s∆°
    const handleSave = async () => {
        setSaving(true);
        try {
            let avatarUrl = form.avatar;

            // N·∫øu ng∆∞·ªùi d√πng ch·ªçn ·∫£nh m·ªõi ‚Üí upload l√™n Cloudinary
            if (file) {
                avatarUrl = await uploadToCloudinary(file);
            }

            // G·ªçi API c·∫≠p nh·∫≠t h·ªì s∆°
            const updatedUser = await userApi.updateProfile({
                name: form.name,
                phone: form.phone,
                avatar: avatarUrl,
            });

            toast.success("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
            setUser?.(updatedUser); // C·∫≠p nh·∫≠t context
            setShowModal(false);
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:", error);
            toast.error("Kh√¥ng th·ªÉ l∆∞u h·ªì s∆°, vui l√≤ng th·ª≠ l·∫°i!");
        } finally {
            setSaving(false);
        }
    };

    return (
        <Container className="py-4">
            {/* üß≠ Header chung cho nh√¢n vi√™n ph·ª•c v·ª• */}
            <Header user={user} onLogout={logout} />

            <h3 className="my-4">H·ªì s∆° c√° nh√¢n</h3>

            {/* ü™™ Th√¥ng tin ng∆∞·ªùi d√πng hi·ªÉn th·ªã tƒ©nh */}
            <Card className="p-3 d-flex flex-row align-items-center gap-3 shadow-sm">
                <Image
                    src={
                        user?.avatar ||
                        "https://cdn-icons-png.flaticon.com/512/149/149071.png"
                    }
                    roundedCircle
                    width={100}
                    height={100}
                />
                <div>
                    <h5>{user?.name}</h5>
                    <p className="mb-1"> <span className="fw-bold">Email:</span>  {user?.email}</p>
                    <p className="mb-1"> <span className="fw-bold">Phone number:</span> {user?.phone || "Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i"}</p>
                    <Button variant="outline-primary" onClick={() => setShowModal(true)}>
                        Ch·ªânh s·ª≠a
                    </Button>
                </div>
            </Card>

            {/* ‚úèÔ∏è Modal ch·ªânh s·ª≠a h·ªì s∆° */}
            <Modal show={showModal} onHide={() => setShowModal(false)} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Ch·ªânh s·ª≠a th√¥ng tin</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form>
                        {/* ·∫¢nh ƒë·∫°i di·ªán */}
                        <div className="d-flex align-items-center mb-3 gap-3">
                            <div style={{ width: 96, height: 96 }}>
                                {preview ? (
                                    <Image src={preview} roundedCircle width={96} height={96} />
                                ) : (
                                    <div
                                        style={{
                                            width: 96,
                                            height: 96,
                                            background: "#eee",
                                            borderRadius: "50%",
                                        }}
                                    />
                                )}
                            </div>
                            <Form.Group controlId="formFile" className="mb-0">
                                <Form.Label>·∫¢nh ƒë·∫°i di·ªán</Form.Label>
                                <Form.Control
                                    type="file"
                                    accept="image/*"
                                    onChange={handleFileChange}
                                />
                                <Form.Text className="text-muted">
                                    ·∫¢nh s·∫Ω ƒë∆∞·ª£c upload l√™n Cloudinary.
                                </Form.Text>
                            </Form.Group>
                        </div>

                        {/* H·ªç t√™n */}
                        <Form.Group className="mb-3">
                            <Form.Label>H·ªç v√† t√™n</Form.Label>
                            <Form.Control
                                value={form.name}
                                onChange={(e) => setForm({ ...form, name: e.target.value })}
                            />
                        </Form.Group>

                        {/* S·ªë ƒëi·ªán tho·∫°i */}
                        <Form.Group className="mb-3">
                            <Form.Label>S·ªë ƒëi·ªán tho·∫°i</Form.Label>
                            <Form.Control
                                value={form.phone}
                                onChange={(e) => setForm({ ...form, phone: e.target.value })}
                            />
                        </Form.Group>
                    </Form>
                </Modal.Body>

                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowModal(false)}>
                        H·ªßy
                    </Button>
                    <Button variant="primary" onClick={handleSave} disabled={saving}>
                        {saving ? <Spinner animation="border" size="sm" /> : "L∆∞u"}
                    </Button>
                </Modal.Footer>
            </Modal>
        </Container>
    );
}
