import { useEffect, useRef, useState } from 'react';

/**
 * ‚úÖ useWaiterWebSocket Hook
 * D√πng cho giao di·ªán Waiter ƒë·ªÉ:
 *  - K·∫øt n·ªëi t·ªõi WebSocket server trung gian (wss)
 *  - Nh·∫≠n message real-time (ƒë∆°n m·ªõi, c·∫≠p nh·∫≠t tr·∫°ng th√°i)
 *  - G·ª≠i message (subscribe order, ph·∫£n h·ªìi kh√°ch,...)
 */
const useWaiterWebSocket = () => {
  // -------------------------------
  // üß† State l∆∞u tr·∫°ng th√°i k·∫øt n·ªëi & message
  // -------------------------------
  const [connectionState, setConnectionState] = useState('disconnected'); // 'connecting' | 'connected' | 'reconnecting'
  const [lastMessage, setLastMessage] = useState(null); // L∆∞u tin nh·∫Øn cu·ªëi c√πng nh·∫≠n ƒë∆∞·ª£c

  // -------------------------------
  // ‚öôÔ∏è useRef l∆∞u c√°c bi·∫øn kh√¥ng l√†m re-render
  // -------------------------------
  const wsRef = useRef(null); // Gi·ªØ ƒë·ªëi t∆∞·ª£ng WebSocket hi·ªán t·∫°i
  const reconnectTimeoutRef = useRef(null); // Timeout ƒë·ªÉ reconnect
  const reconnectAttempts = useRef(0); // ƒê·∫øm s·ªë l·∫ßn reconnect
  const subscribedOrders = useRef(new Set()); // Danh s√°ch order m√† waiter ƒëang subscribe

  const MAX_RECONNECT_ATTEMPTS = 5; // Gi·ªõi h·∫°n reconnect t·ªëi ƒëa

  // -------------------------------
  // üîå H√†m k·∫øt n·ªëi WebSocket
  // -------------------------------
  const connect = () => {
    try {
      setConnectionState('connecting');

      // K·∫øt n·ªëi t·ªõi server WebSocket (ch·∫°y ·ªü port 5000)
      const ws = new WebSocket('ws://localhost:5000/ws');
      wsRef.current = ws;

      // Khi k·∫øt n·ªëi th√†nh c√¥ng
      ws.onopen = () => {
        console.log('üîå Waiter WebSocket connected');
        setConnectionState('connected');
        reconnectAttempts.current = 0; // Reset b·ªô ƒë·∫øm reconnect

        // G·ª≠i message x√°c th·ª±c ƒë·ªÉ server bi·∫øt ƒë√¢y l√† waiter
        ws.send(JSON.stringify({
          type: 'auth',
          role: 'waiter'
        }));
      };

      // Khi nh·∫≠n ƒë∆∞·ª£c message t·ª´ server (WSS)
      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          console.log('üì® Waiter WebSocket message:', message);
          setLastMessage(message); // L∆∞u message m·ªõi v√†o state
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error);
        }
      };

      // Khi k·∫øt n·ªëi b·ªã ƒë√≥ng (do l·ªói, m·∫•t m·∫°ng,...)
      ws.onclose = () => {
        console.log('üîå Waiter WebSocket disconnected');
        setConnectionState('disconnected');

        // N·∫øu ch∆∞a v∆∞·ª£t qu√° gi·ªõi h·∫°n reconnect ‚Üí th·ª≠ l·∫°i
        if (reconnectAttempts.current < MAX_RECONNECT_ATTEMPTS) {
          reconnectAttempts.current++;
          setConnectionState('reconnecting');

          // D√πng backoff delay tƒÉng d·∫ßn (2s, 4s, 6s, ...)
          reconnectTimeoutRef.current = setTimeout(() => {
            console.log(`üîÑ Attempting to reconnect... (${reconnectAttempts.current}/${MAX_RECONNECT_ATTEMPTS})`);
            connect(); // G·ªçi l·∫°i ch√≠nh n√≥
          }, 2000 * reconnectAttempts.current);
        }
      };

      // Khi g·∫∑p l·ªói
      ws.onerror = (error) => {
        console.error('‚ùå Waiter WebSocket error:', error);
        setConnectionState('disconnected');
      };

    } catch (error) {
      console.error('‚ùå Error creating WebSocket connection:', error);
      setConnectionState('disconnected');
    }
  };

  // -------------------------------
  // üî¥ H√†m ng·∫Øt k·∫øt n·ªëi WebSocket
  // -------------------------------
  const disconnect = () => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }
    if (wsRef.current) {
      wsRef.current.close();
    }
  };

  // -------------------------------
  // üì° Subscribe v√†o 1 order c·ª• th·ªÉ
  // waiter g·ª≠i l√™n server ƒë·ªÉ nh·∫≠n update real-time
  // Trong WebSocket, ‚Äúsubscribe‚Äù nghƒ©a l√† client n√≥i v·ªõi server: ‚ÄúT√¥i mu·ªën nh·∫≠n m·ªçi thay ƒë·ªïi li√™n quan ƒë·∫øn order n√†y.‚Äù
  // -------------------------------
  const subscribeToOrder = (orderId) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({
        type: 'subscribe',
        orderId: orderId
      }));
      subscribedOrders.current.add(orderId);
      console.log(`üì° Subscribed to order: ${orderId}`);
    }
  };

  // -------------------------------
  // üö´ H·ªßy subscribe 1 order c·ª• th·ªÉ
  // -------------------------------
  const unsubscribeFromOrder = (orderId) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({
        type: 'unsubscribe',
        orderId: orderId
      }));
      subscribedOrders.current.delete(orderId);
      console.log(`üì° Unsubscribed from order: ${orderId}`);
    }
  };

  // -------------------------------
  // üì¶ Subscribe nhi·ªÅu order c√πng l√∫c
  // (v√≠ d·ª• waiter v·ª´a ƒëƒÉng nh·∫≠p, c·∫ßn nghe t·∫•t c·∫£ order ƒëang pending)
  // -------------------------------
  const subscribeToOrders = (orderIds) => {
    orderIds.forEach(orderId => {
      if (!subscribedOrders.current.has(orderId)) {
        subscribeToOrder(orderId);
      }
    });
  };

  // -------------------------------
  // üßπ H·ªßy t·∫•t c·∫£ order ƒëang theo d√µi
  // (khi waiter logout ho·∫∑c reload trang)
  // -------------------------------
  const unsubscribeFromAllOrders = () => {
    subscribedOrders.current.forEach(orderId => {
      unsubscribeFromOrder(orderId);
    });
    subscribedOrders.current.clear();
  };

  // -------------------------------
  // üé¨ useEffect t·ª± ƒë·ªông connect khi component mount
  // v√† ng·∫Øt k·∫øt n·ªëi khi unmount
  // -------------------------------
  useEffect(() => {
    connect(); // B·∫Øt ƒë·∫ßu k·∫øt n·ªëi WebSocket

    return () => {
      disconnect(); // Cleanup khi component b·ªã hu·ª∑
    };
  }, []);

  // -------------------------------
  // üì§ Tr·∫£ v·ªÅ c√°c h√†m & state cho component d√πng
  // -------------------------------
  return {
    connectionState,
    lastMessage,
    connect,
    disconnect,
    subscribeToOrder,
    unsubscribeFromOrder,
    subscribeToOrders,
    unsubscribeFromAllOrders
  };
};

export default useWaiterWebSocket;
