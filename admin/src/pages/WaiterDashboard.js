import React, { useEffect, useState } from "react";
import Header from "../components/waiter/Header";
import OrderCard from "../components/waiter/OrderCard";
import NotificationBell from "../components/waiter/NotificationBell";
import waiterApi from "../api/waiterApi";
import { Container, Spinner, Row, Col } from "react-bootstrap";
import { useAuth } from "../context/AuthContext";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function WaiterDashboard() {
    const { token, logout } = useAuth();

    // State l∆∞u danh s√°ch order m√† waiter ƒëang x·ª≠ l√Ω
    const [orders, setOrders] = useState([]);

    // Hi·ªÉn th·ªã loading khi ƒëang fetch d·ªØ li·ªáu
    const [loading, setLoading] = useState(true);

    /**
     * üîπ L·∫•y danh s√°ch order ƒëang ph·ª•c v·ª•
     * G·ªçi API GET /api/waiter/orders
     */
    const fetchOrders = async () => {
        try {
            const res = await waiterApi.getActiveOrders();
            setOrders(res.orders || []);
        } catch (err) {
            console.error("Error loading orders:", err.message);
            toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng!");
        } finally {
            setLoading(false);
        }
    };

    /**
     * üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (pending ‚Üí confirmed ‚Üí served)
     * PUT /api/waiter/orders/:orderId
     */
    const handleUpdateStatus = async (orderId, newStatus) => {
        try {
            await waiterApi.updateOrderStatus(orderId, newStatus);
            setOrders((prev) =>
                prev.map((o) => (o._id === orderId ? { ...o, status: newStatus } : o))
            );
            toast.success(`‚úÖ C·∫≠p nh·∫≠t ƒë∆°n #${orderId.slice(-4)} th√†nh ${newStatus}`);
        } catch (err) {
            toast.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n!");
        }
    };

    // G·ªçi API khi component mount
    useEffect(() => {
        fetchOrders();
    }, []);

    return (
        <div className="min-vh-100 bg-light d-flex flex-column">
            {/* Header c·ªë ƒë·ªãnh tr√™n c√πng */}
            <Header onLogout={logout} />

            {/* N·ªôi dung ch√≠nh */}
            <Container className="flex-grow-1 mt-4 pb-4">
                <div className="d-flex flex-wrap justify-content-between align-items-center mb-3">
                    <h4 className="fw-bold text-dark mb-3 mb-md-0">
                        üßæ Danh s√°ch ORDER ƒëang ph·ª•c v·ª•
                    </h4>
                    <NotificationBell />
                </div>

                {/* Tr·∫°ng th√°i loading */}
                {loading ? (
                    <div className="text-center mt-5">
                        <Spinner animation="border" variant="warning" />
                    </div>
                ) : orders.length === 0 ? (
                    <p className="text-muted text-center">
                        Hi·ªán t·∫°i ch∆∞a c√≥ ORDER n√†o.
                    </p>
                ) : (
                    // Hi·ªÉn th·ªã c√°c OrderCard trong l∆∞·ªõi responsive
                    <Row>
                        {orders.map((order) => (
                            <Col key={order._id} xs={12} md={6} lg={4}>
                                <OrderCard
                                    order={order}
                                    onUpdateStatus={handleUpdateStatus}
                                />
                            </Col>
                        ))}
                    </Row>
                )}
            </Container>

            {/* Toast hi·ªÉn th·ªã th√¥ng b√°o popup */}
            <ToastContainer position="top-right" autoClose={3000} />
        </div>
    );
}
